SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:46:08  PAGE    1

************ OBJECT LISTING ************

FILE NAME: D:\DOCUMENTS\Raphael\casio\code\SDK\projects\MessageFX\Test.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Test.c     1    /*****************************************************************/
          Test.c     2    /*                                                               */
          Test.c     3    /*   CASIO fx-9860G SDK Library                                  */
          Test.c     4    /*                                                               */
          Test.c     5    /*   File name : Test.c                                          */
          Test.c     6    /*                                                               */
          Test.c     7    /*   Copyright (c) 2006 CASIO COMPUTER CO., LTD.                 */
          Test.c     8    /*                                                               */
          Test.c     9    /*****************************************************************/
          Test.c    10    #include "D:\CASIO\casio\OS\FX\include\fxlib.h"
          Test.c    11    #include <stdio.h>
          Test.c    12    #include <string.h>
          Test.c    13    #include "D:\DOCUMENTS\Raphael\casio\code\SDK\projects\MessageFX\syscall.h"
          Test.c    14    
          Test.c    15    //****************************************************************************
          Test.c    16    //  AddIn_main (Sample program main function)
          Test.c    17    //
          Test.c    18    //  param   :   isAppli   : 1 = This application is launched by MAIN MENU.
          Test.c    19    //                        : 0 = This application is launched by a strip in eACT application.
          Test.c    20    //
          Test.c    21    //              OptionNum : Strip number (0~3)
          Test.c    22    //                         (This parameter is only used when isAppli parameter is 0.)
          Test.c    23    //
          Test.c    24    //  retval  :   1 = No error / 0 = Error
          Test.c    25    //
          Test.c    26    //****************************************************************************
          Test.c    27    
          Test.c    28    
          Test.c    29    
          Test.c    30    char DeviceName[1024];
          Test.c    31    char Msg[1024] = "No New messages";
          Test.c    32    int isLowercase = 0;
          Test.c    33    
          Test.c    34    void main() {
P   00000000              _main:                           ; function: main
                                                           ; frame size=5468
                                                           ; used runtime library name:
                                                           ; __slow_mvn, __quick_strcpy, __slow_strcpy, __slow_strcmp1
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 2FD6                   MOV.L       R13,@-R15
    00000004 2FC6                   MOV.L       R12,@-R15
    00000006 2FB6                   MOV.L       R11,@-R15
    00000008 2FA6                   MOV.L       R10,@-R15
          Test.c    35        int key;
          Test.c    36        int IsExam = 0;
          Test.c    37        int MsgLength = 3;
    0000000A EA03                   MOV         #3,R10
          Test.c    38        char MsgBuffer[256];
          Test.c    39        char ReservedBuffer[1024];
          Test.c    40        short* recSize;
          Test.c    41        int iresult;
          Test.c    42        char msg[] = "Bt name :";
    0000000C 911F                   MOV.W       L507+6,R1  ; H'1024
    0000000E 2F96                   MOV.L       R9,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:46:08  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000010 2F86                   MOV.L       R8,@-R15
    00000012 4F22                   STS.L       PR,@-R15
    00000014 9018                   MOV.W       L507,R0    ; H'EAD0
    00000016 3F0C                   ADD         R0,R15
    00000018 D80D                   MOV.L       L507+8,R8  ; _Sleep
    0000001A 31FC                   ADD         R15,R1
    0000001C D210                   MOV.L       L507+24,R2 ; L383
    0000001E 9914                   MOV.W       L507+2,R9  ; H'0400
    00000020 DB0C                   MOV.L       L507+12,R11; _strlen
    00000022 9C13                   MOV.W       L507+4,R12 ; H'1430
    00000024 DD0C                   MOV.L       L507+16,R13; _Print
    00000026 3CFC                   ADD         R15,R12
    00000028 DE0C                   MOV.L       L507+20,R14; _locate
    0000002A D30E                   MOV.L       L507+28,R3 ; __slow_mvn
    0000002C 430B                   JSR         @R3
    0000002E E00A                   MOV         #10,R0
          Test.c    43        char res[2062];
          Test.c    44        int Nber = 1;
          Test.c    45        char *Name = &DeviceName;
    00000030 D10D                   MOV.L       L507+32,R1 ; _DeviceName
          Test.c    46        short *recSize2;
          Test.c    47        int CountExcess = 0;
    00000032 E300                   MOV         #0,R3
    00000034 1F11                   MOV.L       R1,@(4,R15)
          Test.c    48    
          Test.c    49        Serial_ClearTransmitBuffer();
    00000036 D10D                   MOV.L       L507+36,R1 ; _Serial_ClearTransmitBuffer
    00000038 410B                   JSR         @R1
    0000003A 1F32                   MOV.L       R3,@(8,R15)
          Test.c    50        Serial_WriteBytes("&GetName&", 10);     //send signal to the ESP32 to create BT AP
    0000003C D40C                   MOV.L       L507+40,R4 ; L389
    0000003E D30D                   MOV.L       L507+44,R3 ; _Serial_WriteBytes
    00000040 430B                   JSR         @R3
    00000042 E50A                   MOV         #10,R5
          Test.c    51        while(Serial_ReadBytes(Name, 1024, recSize2) == 1){     //waiting for a response
    00000044 A021                   BRA         L466
    00000046 0009                   NOP
    00000048              L507:                             
    00000048 EAD0                   .DATA.W     H'EAD0
    0000004A 0400                   .DATA.W     H'0400
    0000004C 1430                   .DATA.W     H'1430
    0000004E 1024                   .DATA.W     H'1024
    00000050 <00000000>             .DATA.L     _Sleep
    00000054 <00000000>             .DATA.L     _strlen
    00000058 <00000000>             .DATA.L     _Print
    0000005C <00000000>             .DATA.L     _locate
    00000060 <00000000>             .DATA.L     L383
    00000064 <00000000>             .DATA.L     __slow_mvn
    00000068 <00000000>             .DATA.L     _DeviceName
    0000006C <00000000>             .DATA.L     _Serial_ClearTransmitBuffer
    00000070 <00000000>             .DATA.L     L389
    00000074 <00000000>             .DATA.L     _Serial_WriteBytes
    00000078              L467:                             
          Test.c    52            CountExcess++;
    00000078 53F2                   MOV.L       @(8,R15),R3
          Test.c    53            if(CountExcess >= 5){                               //TimeOut
    0000007A E205                   MOV         #5,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:46:08  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000007C 7301                   ADD         #1,R3
    0000007E 3323                   CMP/GE      R2,R3
    00000080 8D0A                   BT/S        L469
    00000082 1F32                   MOV.L       R3,@(8,R15)
          Test.c    54                break;
          Test.c    55            }
          Test.c    56            Sleep(1000);
    00000084 947C                   MOV.W       L508,R4    ; H'03E8
    00000086 480B                   JSR         @R8
    00000088 0009                   NOP
    0000008A              L466:                             
    0000008A 66F3                   MOV         R15,R6
    0000008C D341                   MOV.L       L508+20,R3 ; _Serial_ReadBytes
    0000008E 6593                   MOV         R9,R5
    00000090 430B                   JSR         @R3
    00000092 54F1                   MOV.L       @(4,R15),R4
    00000094 8801                   CMP/EQ      #1,R0
    00000096 89EF                   BT          L467
    00000098              L469:                             
          Test.c    57        }
          Test.c    58        if ((strcmp(Name, "") == 0) || (strcmp(Name, " ") == 0) || (CountExcess >= 5)){
    00000098 D53F                   MOV.L       L508+24,R5 ; L392
    0000009A D340                   MOV.L       L508+28,R3 ; __slow_strcmp1
    0000009C 430B                   JSR         @R3
    0000009E 54F1                   MOV.L       @(4,R15),R4
    000000A0 2008                   TST         R0,R0
    000000A2 8909                   BT          L471
    000000A4 D53E                   MOV.L       L508+32,R5 ; L393
    000000A6 D33D                   MOV.L       L508+28,R3 ; __slow_strcmp1
    000000A8 430B                   JSR         @R3
    000000AA 54F1                   MOV.L       @(4,R15),R4
    000000AC 2008                   TST         R0,R0
    000000AE 8903                   BT          L471
    000000B0 52F2                   MOV.L       @(8,R15),R2
    000000B2 E305                   MOV         #5,R3
    000000B4 3233                   CMP/GE      R3,R2
    000000B6 8B03                   BF          L470
    000000B8              L471:                             
          Test.c    59            strcpy(Name, " ERR");
    000000B8 D13A                   MOV.L       L508+36,R1 ; L395
    000000BA D33B                   MOV.L       L508+40,R3 ; __slow_strcpy
    000000BC 430B                   JSR         @R3
    000000BE 50F1                   MOV.L       @(4,R15),R0
    000000C0              L470:                             
          Test.c    60        }
          Test.c    61        
          Test.c    62        
          Test.c    63        locate(1,1);
    000000C0 E501                   MOV         #1,R5
    000000C2 4E0B                   JSR         @R14
    000000C4 6453                   MOV         R5,R4
          Test.c    64        sprintf(res, "%s%s", msg, DeviceName);
    000000C6 D339                   MOV.L       L508+44,R3 ; _DeviceName
    000000C8 925B                   MOV.W       L508+2,R2  ; H'1028
    000000CA 2F36                   MOV.L       R3,@-R15
    000000CC D138                   MOV.L       L508+48,R1 ; L396
    000000CE 32FC                   ADD         R15,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:46:08  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000D0 9458                   MOV.W       L508+4,R4  ; H'0820
    000000D2 2F26                   MOV.L       R2,@-R15
    000000D4 2F16                   MOV.L       R1,@-R15
    000000D6 D237                   MOV.L       L508+52,R2 ; _sprintf
    000000D8 420B                   JSR         @R2
    000000DA 34FC                   ADD         R15,R4
          Test.c    65        Print(res);
    000000DC 9453                   MOV.W       L508+6,R4  ; H'0814
    000000DE 7F0C                   ADD         #12,R15
    000000E0 4D0B                   JSR         @R13
    000000E2 34FC                   ADD         R15,R4
          Test.c    66        locate(1,4);
    000000E4 E504                   MOV         #4,R5
    000000E6 4E0B                   JSR         @R14
    000000E8 E401                   MOV         #1,R4
          Test.c    67        Print("->");
    000000EA D433                   MOV.L       L508+56,R4 ; L397
    000000EC 4D0B                   JSR         @R13
    000000EE 0009                   NOP
    000000F0 D332                   MOV.L       L508+60,R3 ; _Msg
    000000F2 1F31                   MOV.L       R3,@(4,R15)
    000000F4 9248                   MOV.W       L508+8,R2  ; H'0808
    000000F6 32FC                   ADD         R15,R2
    000000F8 1F23                   MOV.L       R2,@(12,R15)
          Test.c    68        //Cursor_SetFlashOn("|");
          Test.c    69    
          Test.c    70    
          Test.c    71        while (1) {
    000000FA              L473:                             
          Test.c    72            strcpy(ReservedBuffer, "");
    000000FA D127                   MOV.L       L508+24,R1 ; L392
    000000FC 9045                   MOV.W       L508+10,R0 ; H'1030
    000000FE D330                   MOV.L       L508+64,R3 ; __quick_strcpy
    00000100 430B                   JSR         @R3
    00000102 30FC                   ADD         R15,R0
          Test.c    73    
          Test.c    74            if(Serial_ReadBytes(ReservedBuffer, 1024, recSize) == 0){
    00000104 9441                   MOV.W       L508+10,R4 ; H'1030
    00000106 66F3                   MOV         R15,R6
    00000108 D222                   MOV.L       L508+20,R2 ; _Serial_ReadBytes
    0000010A 6593                   MOV         R9,R5
    0000010C 420B                   JSR         @R2
    0000010E 34FC                   ADD         R15,R4
    00000110 2008                   TST         R0,R0
    00000112 8B11                   BF          L474
          Test.c    75                
          Test.c    76                locate(1,7);
    00000114 E507                   MOV         #7,R5
    00000116 4E0B                   JSR         @R14
    00000118 E401                   MOV         #1,R4
          Test.c    77                Print("Msg receve !   ");
    0000011A D42A                   MOV.L       L508+68,R4 ; L400
    0000011C 4D0B                   JSR         @R13
    0000011E 0009                   NOP
          Test.c    78                locate(1,6);
    00000120 E506                   MOV         #6,R5
    00000122 4E0B                   JSR         @R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:46:08  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000124 E401                   MOV         #1,R4
          Test.c    79                Print(">>");
    00000126 D428                   MOV.L       L508+72,R4 ; L401
    00000128 4D0B                   JSR         @R13
    0000012A 0009                   NOP
          Test.c    80                Print(ReservedBuffer);
    0000012C 942D                   MOV.W       L508+10,R4 ; H'1030
    0000012E 4D0B                   JSR         @R13
    00000130 34FC                   ADD         R15,R4
          Test.c    81                locate(MsgLength,4);
    00000132 E504                   MOV         #4,R5
    00000134 4E0B                   JSR         @R14
    00000136 64A3                   MOV         R10,R4
    00000138              L474:                             
          Test.c    82            }
          Test.c    83    
          Test.c    84            GetKey(&key);
    00000138 D224                   MOV.L       L508+76,R2 ; _GetKey
    0000013A 420B                   JSR         @R2
    0000013C 64F3                   MOV         R15,R4
          Test.c    85    
          Test.c    86            if (key == KEY_CTRL_EXIT) {
    0000013E 9425                   MOV.W       L508+12,R4 ; H'7532
    00000140 63F2                   MOV.L       @R15,R3
    00000142 3340                   CMP/EQ      R4,R3
    00000144 8B01                   BF          L509
    00000146 A14E                   BRA         L503
    00000148 0009                   NOP
    0000014A              L509:                             
          Test.c    87                //Restart();
          Test.c    88                //TestMode(1);
          Test.c    89                break;
          Test.c    90            }
          Test.c    91            /*if (key == KEY_CTRL_F4) {
          Test.c    92                GetFKeyPtr(Nber, &iresult);
          Test.c    93                FKey_Display(0, iresult);
          Test.c    94                GetFKeyPtr(Nber+1, &iresult);
          Test.c    95                FKey_Display(1, iresult);
          Test.c    96                GetFKeyPtr(Nber+2, &iresult);
          Test.c    97                FKey_Display(2, iresult);
          Test.c    98                GetFKeyPtr(Nber+3, &iresult);
          Test.c    99                FKey_Display(3, iresult);
          Test.c   100                GetFKeyPtr(Nber+4, &iresult);
          Test.c   101                FKey_Display(4, iresult);
          Test.c   102                GetFKeyPtr(Nber+5, &iresult);
          Test.c   103                FKey_Display(5, iresult);
          Test.c   104                Nber+=6;
          Test.c   105                char buff[12];
          Test.c   106                itoa(Nber, buff);
          Test.c   107                locate(1,5);
          Test.c   108                Print(buff);
          Test.c   109            }*/
          Test.c   110            if (key == KEY_CTRL_F6) {
    0000014A 9420                   MOV.W       L508+14,R4 ; H'753E
    0000014C 63F2                   MOV.L       @R15,R3
    0000014E 3340                   CMP/EQ      R4,R3
    00000150 8901                   BT          L510




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:46:08  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000152 A088                   BRA         L477
    00000154 0009                   NOP
    00000156              L510:                             
          Test.c   111                
          Test.c   112                char msgg[] = ">>";
    00000156 911B                   MOV.W       L508+16,R1 ; H'0810
    00000158 D21D                   MOV.L       L508+80,R2 ; L405
    0000015A 31FC                   ADD         R15,R1
    0000015C D31D                   MOV.L       L508+84,R3 ; __slow_mvn
    0000015E 430B                   JSR         @R3
    00000160 E003                   MOV         #3,R0
          Test.c   113                char buffer[2048];
          Test.c   114                char *Name;
          Test.c   115                short * recSize;
          Test.c   116                int CountExcess = 0;
    00000162 E100                   MOV         #0,R1
          Test.c   117    
          Test.c   118                memset(Msg, '\0', strlen(Msg));
    00000164 D415                   MOV.L       L508+60,R4 ; _Msg
    00000166 4B0B                   JSR         @R11
    00000168 1F12                   MOV.L       R1,@(8,R15)
    0000016A 6603                   MOV         R0,R6
    0000016C D413                   MOV.L       L508+60,R4 ; _Msg
    0000016E D31A                   MOV.L       L508+88,R3 ; _memset
    00000170 430B                   JSR         @R3
    00000172 E500                   MOV         #0,R5
          Test.c   119                Name = &Msg;
          Test.c   120                Serial_WriteBytes("&GetMsg&", 9);     //send signal to the ESP32 to get new messages
    00000174 D419                   MOV.L       L508+92,R4 ; L410
    00000176 D21A                   MOV.L       L508+96,R2 ; _Serial_WriteBytes
    00000178 420B                   JSR         @R2
    0000017A E509                   MOV         #9,R5
          Test.c   121    
          Test.c   122                while(Serial_ReadBytes(Name, 1024, recSize) == 1){     //waiting for a response
    0000017C A03B                   BRA         L478
    0000017E 0009                   NOP
    00000180              L508:                             
    00000180 03E8                   .DATA.W     H'03E8
    00000182 1028                   .DATA.W     H'1028
    00000184 0820                   .DATA.W     H'0820
    00000186 0814                   .DATA.W     H'0814
    00000188 0808                   .DATA.W     H'0808
    0000018A 1030                   .DATA.W     H'1030
    0000018C 7532                   .DATA.W     H'7532
    0000018E 753E                   .DATA.W     H'753E
    00000190 0810                   .DATA.W     H'0810
    00000192 0000                   .DATA.W     0
    00000194 <00000000>             .DATA.L     _Serial_ReadBytes
    00000198 <00000000>             .DATA.L     L392
    0000019C <00000000>             .DATA.L     __slow_strcmp1
    000001A0 <00000000>             .DATA.L     L393
    000001A4 <00000000>             .DATA.L     L395
    000001A8 <00000000>             .DATA.L     __slow_strcpy
    000001AC <00000000>             .DATA.L     _DeviceName
    000001B0 <00000000>             .DATA.L     L396
    000001B4 <00000000>             .DATA.L     _sprintf
    000001B8 <00000000>             .DATA.L     L397




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:46:08  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001BC <00000000>             .DATA.L     _Msg
    000001C0 <00000000>             .DATA.L     __quick_strcpy
    000001C4 <00000000>             .DATA.L     L400
    000001C8 <00000000>             .DATA.L     L401
    000001CC <00000000>             .DATA.L     _GetKey
    000001D0 <00000000>             .DATA.L     L405
    000001D4 <00000000>             .DATA.L     __slow_mvn
    000001D8 <00000000>             .DATA.L     _memset
    000001DC <00000000>             .DATA.L     L410
    000001E0 <00000000>             .DATA.L     _Serial_WriteBytes
    000001E4              L479:                             
          Test.c   123                    CountExcess++;
    000001E4 52F2                   MOV.L       @(8,R15),R2
          Test.c   124                    if(CountExcess >= 5){                               //TimeOut
    000001E6 E305                   MOV         #5,R3
    000001E8 7201                   ADD         #1,R2
    000001EA 3233                   CMP/GE      R3,R2
    000001EC 8D0A                   BT/S        L481
    000001EE 1F22                   MOV.L       R2,@(8,R15)
          Test.c   125                        break;
          Test.c   126                    }
          Test.c   127                    Sleep(1000);
    000001F0 9446                   MOV.W       L511,R4    ; H'03E8
    000001F2 480B                   JSR         @R8
    000001F4 0009                   NOP
    000001F6              L478:                             
    000001F6 66F3                   MOV         R15,R6
    000001F8 D323                   MOV.L       L511+8,R3  ; _Serial_ReadBytes
    000001FA 6593                   MOV         R9,R5
    000001FC 430B                   JSR         @R3
    000001FE 54F1                   MOV.L       @(4,R15),R4
    00000200 8801                   CMP/EQ      #1,R0
    00000202 89EF                   BT          L479
    00000204              L481:                             
          Test.c   128                }
          Test.c   129                Serial_ReadBytes(Name, 1024, recSize);
    00000204 D320                   MOV.L       L511+8,R3  ; _Serial_ReadBytes
    00000206 66F3                   MOV         R15,R6
    00000208 6593                   MOV         R9,R5
    0000020A 430B                   JSR         @R3
    0000020C 54F1                   MOV.L       @(4,R15),R4
          Test.c   130                Sleep(10);
    0000020E 480B                   JSR         @R8
    00000210 E40A                   MOV         #10,R4
          Test.c   131                
          Test.c   132                sprintf(buffer, "%s%s", msgg, Msg);
    00000212 D21E                   MOV.L       L511+12,R2 ; _Msg
    00000214 9335                   MOV.W       L511+2,R3  ; H'0814
    00000216 2F26                   MOV.L       R2,@-R15
    00000218 D11D                   MOV.L       L511+16,R1 ; L396
    0000021A 33FC                   ADD         R15,R3
    0000021C 2F36                   MOV.L       R3,@-R15
    0000021E 2F16                   MOV.L       R1,@-R15
    00000220 D31C                   MOV.L       L511+20,R3 ; _sprintf
    00000222 64F3                   MOV         R15,R4
    00000224 430B                   JSR         @R3
    00000226 741C                   ADD         #28,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:46:08  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Test.c   133                if(strcmp(Msg, "&NoNew") == 0){
    00000228 D51B                   MOV.L       L511+24,R5 ; L413
    0000022A D418                   MOV.L       L511+12,R4 ; _Msg
    0000022C D21B                   MOV.L       L511+28,R2 ; __slow_strcmp1
    0000022E 420B                   JSR         @R2
    00000230 7F0C                   ADD         #12,R15
    00000232 2008                   TST         R0,R0
    00000234 8B05                   BF          L482
          Test.c   134                    locate(1,7);
    00000236 E507                   MOV         #7,R5
    00000238 4E0B                   JSR         @R14
    0000023A E401                   MOV         #1,R4
          Test.c   135                    Print("No new messages              ");
    0000023C D418                   MOV.L       L511+32,R4 ; L415
    0000023E A00B                   BRA         L505
    00000240 0009                   NOP
    00000242              L482:                             
          Test.c   136                    locate(MsgLength,4);
          Test.c   137                }
          Test.c   138                else {
          Test.c   139                    locate(1, 6);
    00000242 E506                   MOV         #6,R5
    00000244 4E0B                   JSR         @R14
    00000246 E401                   MOV         #1,R4
          Test.c   140                    Print("                             ");
    00000248 D416                   MOV.L       L511+36,R4 ; L417
    0000024A 4D0B                   JSR         @R13
    0000024C 0009                   NOP
          Test.c   141                    locate(1, 6);
    0000024E E506                   MOV         #6,R5
    00000250 4E0B                   JSR         @R14
    00000252 E401                   MOV         #1,R4
          Test.c   142                    Print(buffer);
    00000254 64F3                   MOV         R15,R4
    00000256 7410                   ADD         #16,R4
    00000258              L505:                             
    00000258 4D0B                   JSR         @R13
    0000025A 0009                   NOP
          Test.c   143                    locate(MsgLength,4);
    0000025C E504                   MOV         #4,R5
    0000025E 4E0B                   JSR         @R14
    00000260 64A3                   MOV         R10,R4
          Test.c   144                }
          Test.c   145    
          Test.c   146                Sleep(15);
    00000262 480B                   JSR         @R8
    00000264 E40F                   MOV         #15,R4
    00000266              L477:                             
          Test.c   147            }
          Test.c   148    
          Test.c   149            if (key == KEY_CTRL_F2) {
    00000266 940D                   MOV.W       L511+4,R4  ; H'753A
    00000268 62F2                   MOV.L       @R15,R2
    0000026A 3240                   CMP/EQ      R4,R2
    0000026C 8B23                   BF          L484
    0000026E D10E                   MOV.L       L511+40,R1 ; _isLowercase
    00000270 6012                   MOV.L       @R1,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:46:08  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000272 8801                   CMP/EQ      #1,R0
    00000274 8F1A                   BF/S        L485
    00000276 6403                   MOV         R0,R4
          Test.c   150    
          Test.c   151                int iresult3;
          Test.c   152    
          Test.c   153                if(isLowercase == 1){
          Test.c   154                    isLowercase = 0;
    00000278 D30B                   MOV.L       L511+40,R3 ; _isLowercase
    0000027A E200                   MOV         #0,R2
    0000027C A01B                   BRA         L484
    0000027E 2322                   MOV.L       R2,@R3
    00000280              L511:                             
    00000280 03E8                   .DATA.W     H'03E8
    00000282 0814                   .DATA.W     H'0814
    00000284 753A                   .DATA.W     H'753A
    00000286 0000                   .DATA.W     0
    00000288 <00000000>             .DATA.L     _Serial_ReadBytes
    0000028C <00000000>             .DATA.L     _Msg
    00000290 <00000000>             .DATA.L     L396
    00000294 <00000000>             .DATA.L     _sprintf
    00000298 <00000000>             .DATA.L     L413
    0000029C <00000000>             .DATA.L     __slow_strcmp1
    000002A0 <00000000>             .DATA.L     L415
    000002A4 <00000000>             .DATA.L     L417
    000002A8 <00000000>             .DATA.L     _isLowercase
    000002AC              L485:                             
          Test.c   155                }else if(isLowercase == 0){
    000002AC 2448                   TST         R4,R4
    000002AE 8B02                   BF          L484
          Test.c   156                    isLowercase = 1;
    000002B0 D220                   MOV.L       L512+6,R2  ; _isLowercase
    000002B2 E401                   MOV         #1,R4
    000002B4 2242                   MOV.L       R4,@R2
    000002B6              L484:                             
          Test.c   157                }
          Test.c   158            }
          Test.c   159    
          Test.c   160            if((key >= 65 && key <= 90) || (key >= 48 && key <= 57) || key == 32){
    000002B6 E341                   MOV         #65,R3
    000002B8 61F2                   MOV.L       @R15,R1
    000002BA 3133                   CMP/GE      R3,R1
    000002BC 8B03                   BF          L490
    000002BE E25A                   MOV         #90,R2
    000002C0 61F2                   MOV.L       @R15,R1
    000002C2 3127                   CMP/GT      R2,R1
    000002C4 8B0A                   BF          L489
    000002C6              L490:                             
    000002C6 E330                   MOV         #48,R3
    000002C8 62F2                   MOV.L       @R15,R2
    000002CA 3233                   CMP/GE      R3,R2
    000002CC 8B03                   BF          L491
    000002CE E239                   MOV         #57,R2
    000002D0 61F2                   MOV.L       @R15,R1
    000002D2 3127                   CMP/GT      R2,R1
    000002D4 8B02                   BF          L489
    000002D6              L491:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:46:08  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002D6 60F2                   MOV.L       @R15,R0
    000002D8 8820                   CMP/EQ      #32,R0
    000002DA 8B33                   BF          L488
    000002DC              L489:                             
          Test.c   161                
          Test.c   162                unsigned char buffer[12];
          Test.c   163    
          Test.c   164                locate(MsgLength,4);        
    000002DC E504                   MOV         #4,R5
    000002DE 4E0B                   JSR         @R14
    000002E0 64A3                   MOV         R10,R4
          Test.c   165                if(isLowercase == 0){
    000002E2 D314                   MOV.L       L512+6,R3  ; _isLowercase
    000002E4 6232                   MOV.L       @R3,R2
    000002E6 2228                   TST         R2,R2
    000002E8 890E                   BT          L445
          Test.c   166                    sprintf(buffer, "%c", key);         //If the input is upper case, get the normal input
          Test.c   167                }else if(key >= 65 && key <= 90){
    000002EA E241                   MOV         #65,R2
    000002EC 61F2                   MOV.L       @R15,R1
    000002EE 3123                   CMP/GE      R2,R1
    000002F0 8B0A                   BF          L445
    000002F2 E15A                   MOV         #90,R1
    000002F4 60F2                   MOV.L       @R15,R0
    000002F6 3017                   CMP/GT      R1,R0
    000002F8 8906                   BT          L445
          Test.c   168                    sprintf(buffer, "%c", (key+32));    //if the input is a number and upper case, get the inp
                         +ut + 32 to be in lower case
    000002FA 62F2                   MOV.L       @R15,R2
    000002FC D30E                   MOV.L       L512+10,R3 ; L425
    000002FE 7220                   ADD         #32,R2
    00000300 2F26                   MOV.L       R2,@-R15
    00000302 2F36                   MOV.L       R3,@-R15
    00000304 A004                   BRA         L506
    00000306 0009                   NOP
    00000308              L445:
          Test.c   169                }else{
          Test.c   170                    sprintf(buffer, "%c", key);
    00000308 62F2                   MOV.L       @R15,R2
    0000030A 2F26                   MOV.L       R2,@-R15
    0000030C D30A                   MOV.L       L512+10,R3 ; L425
    0000030E 2F36                   MOV.L       R3,@-R15
    00000310              L506:                             
    00000310 940D                   MOV.W       L512,R4    ; H'0810
    00000312 D20A                   MOV.L       L512+14,R2 ; _sprintf
    00000314 420B                   JSR         @R2
    00000316 34FC                   ADD         R15,R4
          Test.c   171                }
          Test.c   172                Print(buffer);                 //Print the result
    00000318 940A                   MOV.W       L512+2,R4  ; H'0808
    0000031A 7F08                   ADD         #8,R15
    0000031C 4D0B                   JSR         @R13
    0000031E 34FC                   ADD         R15,R4
          Test.c   173                strncat(MsgBuffer, &buffer, 1);
    00000320 55F3                   MOV.L       @(12,R15),R5
    00000322 E601                   MOV         #1,R6
    00000324 D306                   MOV.L       L512+18,R3 ; _strncat




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:46:08  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000326 430B                   JSR         @R3
    00000328 64C3                   MOV         R12,R4
          Test.c   174                MsgLength++;
    0000032A A028                   BRA         L496
    0000032C 7A01                   ADD         #1,R10
    0000032E              L512:                             
    0000032E 0810                   .DATA.W     H'0810
    00000330 0808                   .DATA.W     H'0808
    00000332 0000                   .DATA.W     0
    00000334 <00000000>             .DATA.L     _isLowercase
    00000338 <00000000>             .DATA.L     L425
    0000033C <00000000>             .DATA.L     _sprintf
    00000340 <00000000>             .DATA.L     _strncat
    00000344              L488:                             
          Test.c   175    
          Test.c   176            }
          Test.c   177            else if(key == KEY_CTRL_DEL){
    00000344 945C                   MOV.W       L513,R4    ; H'7549
    00000346 63F2                   MOV.L       @R15,R3
    00000348 3340                   CMP/EQ      R4,R3
    0000034A 8B18                   BF          L496
          Test.c   178                if(MsgLength > 3){
    0000034C E103                   MOV         #3,R1
    0000034E 3A17                   CMP/GT      R1,R10
    00000350 8B15                   BF          L496
          Test.c   179                    MsgLength--;
    00000352 7AFF                   ADD         #-1,R10
          Test.c   180                    locate(MsgLength,4);
    00000354 E504                   MOV         #4,R5
    00000356 4E0B                   JSR         @R14
    00000358 64A3                   MOV         R10,R4
          Test.c   181                    Print(" ");
    0000035A D42B                   MOV.L       L513+8,R4  ; L393
    0000035C 4D0B                   JSR         @R13
    0000035E 0009                   NOP
          Test.c   182                    strcpy(&MsgBuffer[strlen(MsgBuffer)-1], &MsgBuffer[strlen(MsgBuffer)]);
    00000360 4B0B                   JSR         @R11
    00000362 64C3                   MOV         R12,R4
    00000364 63C3                   MOV         R12,R3
    00000366 330C                   ADD         R0,R3
    00000368 2F36                   MOV.L       R3,@-R15
    0000036A 4B0B                   JSR         @R11
    0000036C 64C3                   MOV         R12,R4
    0000036E 30CC                   ADD         R12,R0
    00000370 D226                   MOV.L       L513+12,R2 ; __slow_strcpy
    00000372 70FF                   ADD         #-1,R0
    00000374 420B                   JSR         @R2
    00000376 61F6                   MOV.L       @R15+,R1
          Test.c   183                    locate(MsgLength,4);
    00000378 E504                   MOV         #4,R5
    0000037A 4E0B                   JSR         @R14
    0000037C 64A3                   MOV         R10,R4
    0000037E              L496:                             
          Test.c   184                }
          Test.c   185            }
          Test.c   186            if(key == KEY_CTRL_EXE || key == KEY_CTRL_F1){
    0000037E 9440                   MOV.W       L513+2,R4  ; H'7534




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:46:08  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000380 63F2                   MOV.L       @R15,R3
    00000382 3340                   CMP/EQ      R4,R3
    00000384 8905                   BT          L500
    00000386 913D                   MOV.W       L513+4,R1  ; H'7539
    00000388 62F2                   MOV.L       @R15,R2
    0000038A 3210                   CMP/EQ      R1,R2
    0000038C 8901                   BT          L514
    0000038E AEB4                   BRA         L473
    00000390 0009                   NOP
    00000392              L514:                             
    00000392              L500:                             
          Test.c   187                if(strlen(MsgBuffer) == 0){
    00000392 4B0B                   JSR         @R11
    00000394 64C3                   MOV         R12,R4
    00000396 2008                   TST         R0,R0
    00000398 8B01                   BF          L515
    0000039A AEAE                   BRA         L473
    0000039C 0009                   NOP
    0000039E              L515:                             
          Test.c   188                    //AUX_DisplayErrorMessage(20);
          Test.c   189                    ;
          Test.c   190                }else{
          Test.c   191    
          Test.c   192                    int debug;
          Test.c   193                    Serial_ClearTransmitBuffer();
    0000039E D21C                   MOV.L       L513+16,R2 ; _Serial_ClearTransmitBuffer
    000003A0 420B                   JSR         @R2
    000003A2 0009                   NOP
          Test.c   194                    debug = Serial_WriteBytes(MsgBuffer, strlen(MsgBuffer));
    000003A4 4B0B                   JSR         @R11
    000003A6 64C3                   MOV         R12,R4
    000003A8 D31A                   MOV.L       L513+20,R3 ; _Serial_WriteBytes
    000003AA 6503                   MOV         R0,R5
    000003AC 430B                   JSR         @R3
    000003AE 64C3                   MOV         R12,R4
          Test.c   195                    Sleep(10);
    000003B0 480B                   JSR         @R8
    000003B2 E40A                   MOV         #10,R4
          Test.c   196                    memset(MsgBuffer, '\0', strlen(MsgBuffer));
    000003B4 4B0B                   JSR         @R11
    000003B6 64C3                   MOV         R12,R4
    000003B8 D217                   MOV.L       L513+24,R2 ; _memset
    000003BA 6603                   MOV         R0,R6
    000003BC E500                   MOV         #0,R5
    000003BE 420B                   JSR         @R2
    000003C0 64C3                   MOV         R12,R4
          Test.c   197                    locate(3,4);
    000003C2 E504                   MOV         #4,R5
    000003C4 4E0B                   JSR         @R14
    000003C6 E403                   MOV         #3,R4
          Test.c   198                    Print("                                      " ); 
    000003C8 D414                   MOV.L       L513+28,R4 ; L434
    000003CA 4D0B                   JSR         @R13
    000003CC 0009                   NOP
          Test.c   199                    MsgLength = 3;
    000003CE EA03                   MOV         #3,R10
          Test.c   200                    locate(1,7);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:46:08  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003D0 E507                   MOV         #7,R5
    000003D2 4E0B                   JSR         @R14
    000003D4 E401                   MOV         #1,R4
          Test.c   201                    Print("Msg sent !             " ); 
    000003D6 D412                   MOV.L       L513+32,R4 ; L435
    000003D8 4D0B                   JSR         @R13
    000003DA 0009                   NOP
          Test.c   202                    locate(MsgLength,4);
    000003DC E504                   MOV         #4,R5
    000003DE 4E0B                   JSR         @R14
    000003E0 64A3                   MOV         R10,R4
    000003E2 AE8A                   BRA         L473
    000003E4 0009                   NOP
    000003E6              L503:                             
          Test.c   203                }
          Test.c   204            }
          Test.c   205        }
          Test.c   206        return;
          Test.c   207    }
    000003E6 910E                   MOV.W       L513+6,R1  ; H'1530
    000003E8 3F1C                   ADD         R1,R15
    000003EA 4F26                   LDS.L       @R15+,PR
    000003EC 68F6                   MOV.L       @R15+,R8
    000003EE 69F6                   MOV.L       @R15+,R9
    000003F0 6AF6                   MOV.L       @R15+,R10
    000003F2 6BF6                   MOV.L       @R15+,R11
    000003F4 6CF6                   MOV.L       @R15+,R12
    000003F6 6DF6                   MOV.L       @R15+,R13
    000003F8 000B                   RTS
    000003FA 6EF6                   MOV.L       @R15+,R14
          Test.c   208    
          Test.c   209    
          Test.c   210    int AddIn_main(int isAppli, unsigned short OptionNum)
    000003FC              _AddIn_main:                     ; function: AddIn_main
                                                           ; frame size=0
          Test.c   211    {
          Test.c   212        main();
    000003FC AE00                   BRA         _main
    000003FE 0009                   NOP
    00000400              L513:                             
    00000400 7549                   .DATA.W     H'7549
    00000402 7534                   .DATA.W     H'7534
    00000404 7539                   .DATA.W     H'7539
    00000406 1530                   .DATA.W     H'1530
    00000408 <00000000>             .DATA.L     L393
    0000040C <00000000>             .DATA.L     __slow_strcpy
    00000410 <00000000>             .DATA.L     _Serial_ClearTransmitBuffer
    00000414 <00000000>             .DATA.L     _Serial_WriteBytes
    00000418 <00000000>             .DATA.L     _memset
    0000041C <00000000>             .DATA.L     L434
    00000420 <00000000>             .DATA.L     L435
          Test.c   213        
          Test.c   214    }
          Test.c   215    
          Test.c   216    //****************************************************************************
          Test.c   217    //**************                                              ****************
          Test.c   218    //**************                 Notice!                      ****************




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:46:08  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Test.c   219    //**************                                              ****************
          Test.c   220    //**************  Please do not change the following source.  ****************
          Test.c   221    //**************                                              ****************
          Test.c   222    //****************************************************************************
          Test.c   223    
          Test.c   224    
          Test.c   225    #pragma section _BR_Size
          Test.c   226    unsigned long BR_Size;
          Test.c   227    #pragma section
          Test.c   228    
          Test.c   229    
          Test.c   230    #pragma section _TOP
          Test.c   231    
          Test.c   232    //****************************************************************************
          Test.c   233    //  InitializeSystem
          Test.c   234    //
          Test.c   235    //  param   :   isAppli   : 1 = Application / 0 = eActivity
          Test.c   236    //              OptionNum : Option Number (only eActivity)
          Test.c   237    //
          Test.c   238    //  retval  :   1 = No error / 0 = Error
          Test.c   239    //
          Test.c   240    //****************************************************************************
          Test.c   241    int InitializeSystem(int isAppli, unsigned short OptionNum)
P_T 00000000              _InitializeSystem:               ; function: InitializeSystem
                                                           ; frame size=0
          Test.c   242    {
          Test.c   243        return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
    00000000 D301                   MOV.L       L516+2,R3  ; _INIT_ADDIN_APPLICATION
    00000002 432B                   JMP         @R3
    00000004 0009                   NOP
    00000006              L516:                             
    00000006 0000                   .DATA.W     0
    00000008 <00000000>             .DATA.L     _INIT_ADDIN_APPLICATION
          Test.c   244    }
          Test.c   245    
          Test.c   246    #pragma section
D   00000000              _Msg:                            ; static: Msg
    00000000 4E6F204E65             .SDATA      "No New messages"
             77206D6573   
             7361676573   
    0000000F 00                     .DATA.B     H'00
    00000010 000003F001             .DATAB.B    1008,0
             00           
    00000400              _isLowercase:                    ; static: isLowercase
    00000400 00000000               .DATA.L     H'00000000
C   00000000              L383:
    00000000 4274206E61             .SDATA      "Bt name :"
             6D65203A     
    00000009 00                     .DATA.B     H'00
    0000000A 00000002               .RES.W      1
    0000000C              L389:
    0000000C 264765744E             .SDATA      "&GetName&"
             616D6526     
    00000015 00                     .DATA.B     H'00
    00000016 00000002               .RES.W      1
    00000018              L392:
    00000018 00                     .DATA.B     H'00




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:46:08  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000019 00000001               .RES.B      1
    0000001A 00000002               .RES.W      1
    0000001C              L393:
    0000001C 20                     .SDATA      " "
    0000001D 00                     .DATA.B     H'00
    0000001E 00000002               .RES.W      1
    00000020              L395:
    00000020 20455252               .SDATA      " ERR"
    00000024 00                     .DATA.B     H'00
    00000025 00000001               .RES.B      1
    00000026 00000002               .RES.W      1
    00000028              L396:
    00000028 25732573               .SDATA      "%s%s"
    0000002C 00                     .DATA.B     H'00
    0000002D 00000001               .RES.B      1
    0000002E 00000002               .RES.W      1
    00000030              L397:
    00000030 2D3E                   .SDATA      "->"
    00000032 00                     .DATA.B     H'00
    00000033 00000001               .RES.B      1
    00000034              L400:
    00000034 4D73672072             .SDATA      "Msg receve !   "
             6563657665   
             2021202020   
    00000043 00                     .DATA.B     H'00
    00000044              L401:
    00000044 3E3E                   .SDATA      ">>"
    00000046 00                     .DATA.B     H'00
    00000047              L405:
    00000047 3E3E                   .SDATA      ">>"
    00000049 00                     .DATA.B     H'00
    0000004A 00000002               .RES.W      1
    0000004C              L410:
    0000004C 264765744D             .SDATA      "&GetMsg&"
             736726       
    00000054 00                     .DATA.B     H'00
    00000055 00000001               .RES.B      1
    00000056 00000002               .RES.W      1
    00000058              L413:
    00000058 264E6F4E65             .SDATA      "&NoNew"
             77           
    0000005E 00                     .DATA.B     H'00
    0000005F 00000001               .RES.B      1
    00000060              L415:
    00000060 4E6F206E65             .SDATA      "No new messages              "
             77206D6573   
             7361676573   
             2020202020   
             2020202020   
             20202020     
    0000007D 00                     .DATA.B     H'00
    0000007E 00000002               .RES.W      1
    00000080              L417:
    00000080 2020202020             .SDATA      "                             "
             2020202020   
             2020202020   
             2020202020   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:46:08  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             2020202020   
             20202020     
    0000009D 00                     .DATA.B     H'00
    0000009E 00000002               .RES.W      1
    000000A0              L425:
    000000A0 2563                   .SDATA      "%c"
    000000A2 00                     .DATA.B     H'00
    000000A3 00000001               .RES.B      1
    000000A4              L434:
    000000A4 2020202020             .SDATA      "                                      "
             2020202020   
             2020202020   
             2020202020   
             2020202020   
             2020202020   
             2020202020   
             202020       
    000000CA 00                     .DATA.B     H'00
    000000CB 00000001               .RES.B      1
    000000CC              L435:
    000000CC 4D73672073             .SDATA      "Msg sent !             "
             656E742021   
             2020202020   
             2020202020   
             202020       
    000000E3 00                     .DATA.B     H'00
B   00000000              _DeviceName:                     ; static: DeviceName
    00000000 00000400               .RES.B      1024
B_B 00000000              _BR_Size:                        ; static: BR_Size
    00000000 00000004               .RES.L      1































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:46:08  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        25




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      246



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000424 Byte(s)
PROGRAM  SECTION (P_BR_Size):                       00000000 Byte(s)
PROGRAM  SECTION (P_TOP):                           0000000C Byte(s)
CONSTANT SECTION (C):                               000000E4 Byte(s)
CONSTANT SECTION (C_BR_Size):                       00000000 Byte(s)
CONSTANT SECTION (C_TOP):                           00000000 Byte(s)
DATA     SECTION (D):                               00000404 Byte(s)
DATA     SECTION (D_BR_Size):                       00000000 Byte(s)
DATA     SECTION (D_TOP):                           00000000 Byte(s)
BSS      SECTION (B):                               00000400 Byte(s)
BSS      SECTION (B_BR_Size):                       00000004 Byte(s)
BSS      SECTION (B_TOP):                           00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00000D1C Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           16
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           7
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            74






















*** COMMAND PARAMETER ***


  -subcommand=C:\Users\rapha\AppData\Local\Temp\hmk4C59.tmp 

