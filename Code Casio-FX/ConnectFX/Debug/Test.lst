SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE    1

************ OBJECT LISTING ************

FILE NAME: D:\DOCUMENTS\Raphael\casio\code\SDK\projects\ConnectFX\Test.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Test.c     1    /*****************************************************************/
          Test.c     2    /*                                                               */
          Test.c     3    /*   CASIO fx-9860G SDK Library                                  */
          Test.c     4    /*                                                               */
          Test.c     5    /*   File name : Test.c                                          */
          Test.c     6    /*                                                               */
          Test.c     7    /*   Copyright (c) 2006 CASIO COMPUTER CO., LTD.                 */
          Test.c     8    /*                                                               */
          Test.c     9    /*****************************************************************/
          Test.c    10    #include "D:\CASIO\casio\OS\FX\include\fxlib.h"
          Test.c    11    #include <stdio.h>
          Test.c    12    #include <string.h>
          Test.c    13    #include "D:\DOCUMENTS\Raphael\casio\code\SDK\projects\ConnectFX\syscall.h"
          Test.c    14    
          Test.c    15    //****************************************************************************
          Test.c    16    //  AddIn_main (Sample program main function)
          Test.c    17    //
          Test.c    18    //  param   :   isAppli   : 1 = This application is launched by MAIN MENU.
          Test.c    19    //                        : 0 = This application is launched by a strip in eACT application.
          Test.c    20    //
          Test.c    21    //              OptionNum : Strip number (0~3)
          Test.c    22    //                         (This parameter is only used when isAppli parameter is 0.)
          Test.c    23    //
          Test.c    24    //  retval  :   1 = No error / 0 = Error
          Test.c    25    //
          Test.c    26    //****************************************************************************
          Test.c    27    
          Test.c    28    int window = 0;             //current window displayed
          Test.c    29    int IsExam = 0;             //Is led blinking
          Test.c    30    int n;                      //selected BT device
          Test.c    31    int i = 0;                  //numer of devices
          Test.c    32    int IsTyping = 0;           //Is in typing mode
          Test.c    33    int IsSleeping = 0;         //Is the ESP32 in deep sleep
          Test.c    34    int MsgLength = 6;          //Cusror place for text input
          Test.c    35    char MsgBuffer[1024];       //Msg enter in text input 
          Test.c    36    int isLowercase = 0;
          Test.c    37    char ReservedBufferBis[1024];
          Test.c    38    
          Test.c    39    
          Test.c    40    void OpenBTList(){                          //Create the window to connect to a BT device
P   00000000              _OpenBTList:                     ; function: OpenBTList
                                                           ; frame size=16
    00000000 2FE6                   MOV.L       R14,@-R15
          Test.c    41    
          Test.c    42        unsigned char *iresult;   
          Test.c    43        IsTyping = 1;
    00000002 E301                   MOV         #1,R3
    00000004 D243                   MOV.L       L648+12,R2 ; _IsTyping
    00000006 2FD6                   MOV.L       R13,@-R15
    00000008 4F22                   STS.L       PR,@-R15
    0000000A 7FFC                   ADD         #-4,R15
          Test.c    44        memset(MsgBuffer, 0, 1024);
    0000000C 967C                   MOV.W       L648,R6    ; H'0400
    0000000E 2232                   MOV.L       R3,@R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000010 D441                   MOV.L       L648+16,R4 ; _MsgBuffer
    00000012 D342                   MOV.L       L648+20,R3 ; _memset
    00000014 430B                   JSR         @R3
    00000016 E500                   MOV         #0,R5
          Test.c    45        Bdisp_AllClr_VRAM();                    //Clear the Vram
    00000018 D241                   MOV.L       L648+24,R2 ; _Bdisp_AllClr_VRAM
    0000001A 420B                   JSR         @R2
    0000001C 0009                   NOP
          Test.c    46        
          Test.c    47        locate(1,1);                                     //Put text to screen
    0000001E E501                   MOV         #1,R5
    00000020 DE40                   MOV.L       L648+28,R14; _locate
    00000022 4E0B                   JSR         @R14
    00000024 6453                   MOV         R5,R4
          Test.c    48        Print((unsigned char*)"F1:create BT");
    00000026 DD40                   MOV.L       L648+32,R13; _Print
    00000028 D440                   MOV.L       L648+36,R4 ; L390
    0000002A 4D0B                   JSR         @R13
    0000002C 0009                   NOP
          Test.c    49        locate(1,2);
    0000002E E502                   MOV         #2,R5
    00000030 4E0B                   JSR         @R14
    00000032 E401                   MOV         #1,R4
          Test.c    50        Print((unsigned char*)"Name of the BT device");
    00000034 D43E                   MOV.L       L648+40,R4 ; L391
    00000036 4D0B                   JSR         @R13
    00000038 0009                   NOP
          Test.c    51        locate(1,4);
    0000003A E504                   MOV         #4,R5
    0000003C 4E0B                   JSR         @R14
    0000003E E401                   MOV         #1,R4
          Test.c    52        Print((unsigned char*)"->");
    00000040 D43C                   MOV.L       L648+44,R4 ; L392
    00000042 4D0B                   JSR         @R13
    00000044 0009                   NOP
          Test.c    53        Cursor_SetFlashOn(1);
    00000046 D33C                   MOV.L       L648+48,R3 ; _Cursor_SetFlashOn
    00000048 430B                   JSR         @R3
    0000004A E401                   MOV         #1,R4
          Test.c    54        MsgLength = 3;
    0000004C D33B                   MOV.L       L648+52,R3 ; _MsgLength
    0000004E E203                   MOV         #3,R2
          Test.c    55    
          Test.c    56                                 //Put the Fkey bitmap on screen
          Test.c    57        GetFKeyIconPointer(266, &iresult);
    00000050 DE3B                   MOV.L       L648+56,R14; _GetFKeyIconPointer
    00000052 2322                   MOV.L       R2,@R3
    00000054 9459                   MOV.W       L648+2,R4  ; H'010A
    00000056 4E0B                   JSR         @R14
    00000058 65F3                   MOV         R15,R5
          Test.c    58        DisplayFKeyIcon(0, iresult);       //F1
    0000005A DD3A                   MOV.L       L648+60,R13; _DisplayFKeyIcon
    0000005C 65F2                   MOV.L       @R15,R5
    0000005E 4D0B                   JSR         @R13
    00000060 E400                   MOV         #0,R4
          Test.c    59    
          Test.c    60    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Test.c    61        GetFKeyIconPointer(1061, &iresult);
    00000062 9453                   MOV.W       L648+4,R4  ; H'0425
    00000064 4E0B                   JSR         @R14
    00000066 65F3                   MOV         R15,R5
          Test.c    62        DisplayFKeyIcon(1, iresult);      //F2
    00000068 65F2                   MOV.L       @R15,R5
    0000006A 4D0B                   JSR         @R13
    0000006C E401                   MOV         #1,R4
          Test.c    63    
          Test.c    64     
          Test.c    65        GetFKeyIconPointer(0x02B1, &iresult);
    0000006E 944E                   MOV.W       L648+6,R4  ; H'02B1
    00000070 4E0B                   JSR         @R14
    00000072 65F3                   MOV         R15,R5
          Test.c    66        DisplayFKeyIcon(5, iresult);      //F6
    00000074 65F2                   MOV.L       @R15,R5
    00000076 4D0B                   JSR         @R13
    00000078 E405                   MOV         #5,R4
          Test.c    67    
          Test.c    68        return;
          Test.c    69    }
    0000007A 7F04                   ADD         #4,R15
    0000007C 4F26                   LDS.L       @R15+,PR
    0000007E 6DF6                   MOV.L       @R15+,R13
    00000080 000B                   RTS
    00000082 6EF6                   MOV.L       @R15+,R14
          Test.c    70    
          Test.c    71    void CreateBTMenu(){                                //Create the window to create a BT AP
    00000084              _CreateBTMenu:                   ; function: CreateBTMenu
                                                           ; frame size=16
    00000084 2FE6                   MOV.L       R14,@-R15
          Test.c    72    
          Test.c    73        unsigned char* iresult5;
          Test.c    74        MsgLength = 3;
    00000086 E303                   MOV         #3,R3
    00000088 D22C                   MOV.L       L648+52,R2 ; _MsgLength
    0000008A 2FD6                   MOV.L       R13,@-R15
    0000008C 4F22                   STS.L       PR,@-R15
    0000008E 7FFC                   ADD         #-4,R15
          Test.c    75        memset(MsgBuffer, 0, 1024);
    00000090 963A                   MOV.W       L648,R6    ; H'0400
    00000092 2232                   MOV.L       R3,@R2
    00000094 D420                   MOV.L       L648+16,R4 ; _MsgBuffer
    00000096 D321                   MOV.L       L648+20,R3 ; _memset
    00000098 430B                   JSR         @R3
    0000009A E500                   MOV         #0,R5
          Test.c    76        Bdisp_AllClr_VRAM();                            //clear VRAM
    0000009C D220                   MOV.L       L648+24,R2 ; _Bdisp_AllClr_VRAM
    0000009E 420B                   JSR         @R2
    000000A0 0009                   NOP
          Test.c    77        locate(1,1);
    000000A2 E501                   MOV         #1,R5
    000000A4 DE1F                   MOV.L       L648+28,R14; _locate
    000000A6 4E0B                   JSR         @R14
    000000A8 6453                   MOV         R5,R4
          Test.c    78        Print((unsigned char*)"Create new BT");       
    000000AA DD1F                   MOV.L       L648+32,R13; _Print




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000AC D426                   MOV.L       L648+64,R4 ; L396
    000000AE 4D0B                   JSR         @R13
    000000B0 0009                   NOP
          Test.c    79        locate(1,2);
    000000B2 E502                   MOV         #2,R5
    000000B4 4E0B                   JSR         @R14
    000000B6 E401                   MOV         #1,R4
          Test.c    80        Print((unsigned char*)"Name :");      
    000000B8 D424                   MOV.L       L648+68,R4 ; L397
    000000BA 4D0B                   JSR         @R13
    000000BC 0009                   NOP
          Test.c    81        locate(1,4);
    000000BE E504                   MOV         #4,R5
    000000C0 4E0B                   JSR         @R14
    000000C2 E401                   MOV         #1,R4
          Test.c    82        Print((unsigned char*)"->");                  
    000000C4 D41B                   MOV.L       L648+44,R4 ; L392
    000000C6 4D0B                   JSR         @R13
    000000C8 0009                   NOP
          Test.c    83        Cursor_SetFlashOn(1);
    000000CA D31B                   MOV.L       L648+48,R3 ; _Cursor_SetFlashOn
    000000CC 430B                   JSR         @R3
    000000CE E401                   MOV         #1,R4
          Test.c    84        IsTyping = 1;
    000000D0 D310                   MOV.L       L648+12,R3 ; _IsTyping
    000000D2 E201                   MOV         #1,R2
          Test.c    85    
          Test.c    86        GetFKeyIconPointer(0x02B1, &iresult5);
    000000D4 DE1A                   MOV.L       L648+56,R14; _GetFKeyIconPointer
    000000D6 2322                   MOV.L       R2,@R3
    000000D8 9419                   MOV.W       L648+6,R4  ; H'02B1
    000000DA 4E0B                   JSR         @R14
    000000DC 65F3                   MOV         R15,R5
          Test.c    87        DisplayFKeyIcon(5, iresult5);      //F6
    000000DE DD19                   MOV.L       L648+60,R13; _DisplayFKeyIcon
    000000E0 65F2                   MOV.L       @R15,R5
    000000E2 4D0B                   JSR         @R13
    000000E4 E405                   MOV         #5,R4
          Test.c    88    
          Test.c    89        GetFKeyIconPointer(1061, &iresult5);
    000000E6 9411                   MOV.W       L648+4,R4  ; H'0425
    000000E8 4E0B                   JSR         @R14
    000000EA 65F3                   MOV         R15,R5
          Test.c    90        DisplayFKeyIcon(1, iresult5);      //F2
    000000EC 65F2                   MOV.L       @R15,R5
    000000EE 4D0B                   JSR         @R13
    000000F0 E401                   MOV         #1,R4
          Test.c    91    
          Test.c    92        GetFKeyIconPointer(1017, &iresult5);
    000000F2 940D                   MOV.W       L648+8,R4  ; H'03F9
    000000F4 4E0B                   JSR         @R14
    000000F6 65F3                   MOV         R15,R5
          Test.c    93        DisplayFKeyIcon(0, iresult5);      //F1
    000000F8 65F2                   MOV.L       @R15,R5
    000000FA 4D0B                   JSR         @R13
    000000FC E400                   MOV         #0,R4
          Test.c    94        return;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Test.c    95    }
    000000FE 7F04                   ADD         #4,R15
    00000100 4F26                   LDS.L       @R15+,PR
    00000102 6DF6                   MOV.L       @R15+,R13
    00000104 000B                   RTS
    00000106 6EF6                   MOV.L       @R15+,R14
    00000108              L648:                             
    00000108 0400                   .DATA.W     H'0400
    0000010A 010A                   .DATA.W     H'010A
    0000010C 0425                   .DATA.W     H'0425
    0000010E 02B1                   .DATA.W     H'02B1
    00000110 03F9                   .DATA.W     H'03F9
    00000112 0000                   .DATA.W     0
    00000114 <00000000>             .DATA.L     _IsTyping
    00000118 <00000000>             .DATA.L     _MsgBuffer
    0000011C <00000000>             .DATA.L     _memset
    00000120 <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    00000124 <00000000>             .DATA.L     _locate
    00000128 <00000000>             .DATA.L     _Print
    0000012C <00000000>             .DATA.L     L390
    00000130 <00000000>             .DATA.L     L391
    00000134 <00000000>             .DATA.L     L392
    00000138 <00000000>             .DATA.L     _Cursor_SetFlashOn
    0000013C <00000000>             .DATA.L     _MsgLength
    00000140 <00000000>             .DATA.L     _GetFKeyIconPointer
    00000144 <00000000>             .DATA.L     _DisplayFKeyIcon
    00000148 <00000000>             .DATA.L     L396
    0000014C <00000000>             .DATA.L     L397
          Test.c    96    
          Test.c    97    void MainMenu(){
    00000150              _MainMenu:                       ; function: MainMenu
                                                           ; frame size=16
    00000150 2FE6                   MOV.L       R14,@-R15
    00000152 2FD6                   MOV.L       R13,@-R15
    00000154 4F22                   STS.L       PR,@-R15
    00000156 7FFC                   ADD         #-4,R15
          Test.c    98    
          Test.c    99    
          Test.c   100        unsigned char *iresult;
          Test.c   101        Bdisp_AllClr_VRAM();
    00000158 D349                   MOV.L       L649+14,R3 ; _Bdisp_AllClr_VRAM
    0000015A 430B                   JSR         @R3
    0000015C 0009                   NOP
          Test.c   102    
          Test.c   103        //Put Fkey bmps on screen
          Test.c   104        GetFKeyIconPointer(0x0165, &iresult);
    0000015E DE49                   MOV.L       L649+18,R14; _GetFKeyIconPointer
    00000160 9487                   MOV.W       L649,R4    ; H'0165
    00000162 4E0B                   JSR         @R14
    00000164 65F3                   MOV         R15,R5
          Test.c   105        DisplayFKeyIcon(0, iresult);       //F1
    00000166 DD48                   MOV.L       L649+22,R13; _DisplayFKeyIcon
    00000168 65F2                   MOV.L       @R15,R5
    0000016A 4D0B                   JSR         @R13
    0000016C E400                   MOV         #0,R4
          Test.c   106        
          Test.c   107        GetFKeyIconPointer(1113, &iresult);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000016E 9481                   MOV.W       L649+2,R4  ; H'0459
    00000170 4E0B                   JSR         @R14
    00000172 65F3                   MOV         R15,R5
          Test.c   108        DisplayFKeyIcon(1, iresult);      //F2
    00000174 65F2                   MOV.L       @R15,R5
    00000176 4D0B                   JSR         @R13
    00000178 E401                   MOV         #1,R4
          Test.c   109            
          Test.c   110        GetFKeyIconPointer(38, &iresult);
    0000017A 65F3                   MOV         R15,R5
    0000017C 4E0B                   JSR         @R14
    0000017E E426                   MOV         #38,R4
          Test.c   111        DisplayFKeyIcon(2, iresult);      //F3
    00000180 65F2                   MOV.L       @R15,R5
    00000182 4D0B                   JSR         @R13
    00000184 E402                   MOV         #2,R4
          Test.c   112    
          Test.c   113        GetFKeyIconPointer(0x0165, &iresult);
    00000186 9474                   MOV.W       L649,R4    ; H'0165
    00000188 4E0B                   JSR         @R14
    0000018A 65F3                   MOV         R15,R5
          Test.c   114        DisplayFKeyIcon(3, iresult);      //F4
    0000018C 65F2                   MOV.L       @R15,R5
    0000018E 4D0B                   JSR         @R13
    00000190 E403                   MOV         #3,R4
          Test.c   115    
          Test.c   116        GetFKeyIconPointer(992, &iresult);
    00000192 9470                   MOV.W       L649+4,R4  ; H'03E0
    00000194 4E0B                   JSR         @R14
    00000196 65F3                   MOV         R15,R5
          Test.c   117        DisplayFKeyIcon(4, iresult);      //F5
    00000198 65F2                   MOV.L       @R15,R5
    0000019A 4D0B                   JSR         @R13
    0000019C E404                   MOV         #4,R4
          Test.c   118        
          Test.c   119        locate(1,1);
    0000019E E501                   MOV         #1,R5
    000001A0 DE3A                   MOV.L       L649+26,R14; _locate
    000001A2 4E0B                   JSR         @R14
    000001A4 6453                   MOV         R5,R4
          Test.c   120        Print((unsigned char*)"F1:open serial ESP32");
    000001A6 DD3A                   MOV.L       L649+30,R13; _Print
    000001A8 D43A                   MOV.L       L649+34,R4 ; L401
    000001AA 4D0B                   JSR         @R13
    000001AC 0009                   NOP
          Test.c   121        locate(1,2);
    000001AE E502                   MOV         #2,R5
    000001B0 4E0B                   JSR         @R14
    000001B2 E401                   MOV         #1,R4
          Test.c   122        Print((unsigned char*)"F2:exam mode");
    000001B4 D438                   MOV.L       L649+38,R4 ; L402
    000001B6 4D0B                   JSR         @R13
    000001B8 0009                   NOP
          Test.c   123        locate(1,3);
    000001BA E503                   MOV         #3,R5
    000001BC 4E0B                   JSR         @R14
    000001BE E401                   MOV         #1,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Test.c   124        Print((unsigned char*)"F3:power off ESP32");
    000001C0 D436                   MOV.L       L649+42,R4 ; L403
    000001C2 4D0B                   JSR         @R13
    000001C4 0009                   NOP
          Test.c   125        locate(1,4);
    000001C6 E504                   MOV         #4,R5
    000001C8 4E0B                   JSR         @R14
    000001CA E401                   MOV         #1,R4
          Test.c   126        Print((unsigned char*)"F4:Connect BT");
    000001CC D434                   MOV.L       L649+46,R4 ; L404
    000001CE 4D0B                   JSR         @R13
    000001D0 0009                   NOP
          Test.c   127        locate(1,5);
    000001D2 E505                   MOV         #5,R5
    000001D4 4E0B                   JSR         @R14
    000001D6 E401                   MOV         #1,R4
          Test.c   128        Print((unsigned char*)"F5:Restart ESP32");
    000001D8 D432                   MOV.L       L649+50,R4 ; L405
    000001DA 4D0B                   JSR         @R13
    000001DC 0009                   NOP
          Test.c   129        locate(1,6);
    000001DE E506                   MOV         #6,R5
    000001E0 4E0B                   JSR         @R14
    000001E2 E401                   MOV         #1,R4
          Test.c   130        Print((unsigned char*)"ESP32 disconnected");
    000001E4 D430                   MOV.L       L649+54,R4 ; L406
    000001E6 4D0B                   JSR         @R13
    000001E8 0009                   NOP
          Test.c   131        locate(1,7);
    000001EA E507                   MOV         #7,R5
    000001EC 4E0B                   JSR         @R14
    000001EE E401                   MOV         #1,R4
          Test.c   132        Print((unsigned char*)"Exam mode off    ");
    000001F0 D42E                   MOV.L       L649+58,R4 ; L407
    000001F2 4D0B                   JSR         @R13
    000001F4 0009                   NOP
          Test.c   133        Keyboard_PutKeycode(-1, -1, 0x30);
    000001F6 E630                   MOV         #48,R6
    000001F8 D32D                   MOV.L       L649+62,R3 ; _Keyboard_PutKeycode
    000001FA E5FF                   MOV         #-1,R5
    000001FC 430B                   JSR         @R3
    000001FE 6453                   MOV         R5,R4
          Test.c   134        return;
          Test.c   135    
          Test.c   136    }
    00000200 7F04                   ADD         #4,R15
    00000202 4F26                   LDS.L       @R15+,PR
    00000204 6DF6                   MOV.L       @R15+,R13
    00000206 000B                   RTS
    00000208 6EF6                   MOV.L       @R15+,R14
          Test.c   137    
          Test.c   138    void main() {
    0000020A              _main:                           ; function: main
                                                           ; frame size=4180
                                                           ; used runtime library name:
                                                           ; __slow_mvn, __slow_strcpy, __slow_strcmp1
    0000020A 2FE6                   MOV.L       R14,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000020C 2FD6                   MOV.L       R13,@-R15
    0000020E 2FC6                   MOV.L       R12,@-R15
    00000210 2FB6                   MOV.L       R11,@-R15
    00000212 2FA6                   MOV.L       R10,@-R15
    00000214 2F96                   MOV.L       R9,@-R15
    00000216 2F86                   MOV.L       R8,@-R15
    00000218 4F22                   STS.L       PR,@-R15
    0000021A 4F12                   STS.L       MACL,@-R15
    0000021C 902C                   MOV.W       L649+6,R0  ; H'EFD8
    0000021E 3F0C                   ADD         R0,R15
    00000220 D824                   MOV.L       L649+66,R8 ; _Serial_WriteBytes
    00000222 D925                   MOV.L       L649+70,R9 ; _Sleep
    00000224 DA1A                   MOV.L       L649+30,R10; _Print
    00000226 DB19                   MOV.L       L649+26,R11; _locate
    00000228 DC24                   MOV.L       L649+74,R12; _MsgBuffer
    0000022A DE25                   MOV.L       L649+78,R14; _MsgLength
          Test.c   139    
          Test.c   140        
          Test.c   141        unsigned int key;
          Test.c   142        int isPressed = 0;
          Test.c   143        MainMenu();
    0000022C BF90                   BSR         _MainMenu
    0000022E ED00                   MOV         #0,R13
    00000230 9223                   MOV.W       L649+8,R2  ; H'101C
    00000232 32FC                   ADD         R15,R2
    00000234 1F28                   MOV.L       R2,@(32,R15)
    00000236 D323                   MOV.L       L649+82,R3 ; _ReservedBufferBis
    00000238 921F                   MOV.W       L649+8,R2  ; H'101C
    0000023A 1F34                   MOV.L       R3,@(16,R15)
    0000023C 32FC                   ADD         R15,R2
    0000023E 1F29                   MOV.L       R2,@(36,R15)
          Test.c   144       
          Test.c   145        while(1){
    00000240              L557:                             
          Test.c   146    
          Test.c   147            isPressed = 0;
    00000240 1FD5                   MOV.L       R13,@(20,R15)
          Test.c   148            GetKey(&key);
    00000242 D321                   MOV.L       L649+86,R3 ; _GetKey
    00000244 430B                   JSR         @R3
    00000246 64F3                   MOV         R15,R4
          Test.c   149    
          Test.c   150            if(window == 0){
    00000248 D320                   MOV.L       L649+90,R3 ; _window
    0000024A 6232                   MOV.L       @R3,R2
    0000024C 2228                   TST         R2,R2
    0000024E 8901                   BT          L650
    00000250 A14E                   BRA         L558
    00000252 0009                   NOP
    00000254              L650:                             
          Test.c   151                if (key == KEY_CTRL_EXIT) {     //Stop the program if the key is EXIT
    00000254 9412                   MOV.W       L649+10,R4 ; H'7532
    00000256 62F2                   MOV.L       @R15,R2
    00000258 3240                   CMP/EQ      R4,R2
    0000025A 8B3D                   BF          L559
          Test.c   152    
          Test.c   153                    const char* pd = "turn off ESP32 !";




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000025C D41C                   MOV.L       L649+94,R4 ; L416
          Test.c   154                    locate(3,3);
    0000025E E503                   MOV         #3,R5
    00000260 1F44                   MOV.L       R4,@(16,R15)
    00000262 4B0B                   JSR         @R11
    00000264 6453                   MOV         R5,R4
          Test.c   155                    DisplayMessageBox(6, pd);
    00000266 55F4                   MOV.L       @(16,R15),R5
    00000268 D31A                   MOV.L       L649+98,R3 ; _DisplayMessageBox
    0000026A 430B                   JSR         @R3
    0000026C E406                   MOV         #6,R4
          Test.c   156    
          Test.c   157                    break;
    0000026E A3E1                   BRA         L560
    00000270 0009                   NOP
    00000272              L649:                             
    00000272 0165                   .DATA.W     H'0165
    00000274 0459                   .DATA.W     H'0459
    00000276 03E0                   .DATA.W     H'03E0
    00000278 EFD8                   .DATA.W     H'EFD8
    0000027A 101C                   .DATA.W     H'101C
    0000027C 7532                   .DATA.W     H'7532
    0000027E 0000                   .DATA.W     0
    00000280 <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    00000284 <00000000>             .DATA.L     _GetFKeyIconPointer
    00000288 <00000000>             .DATA.L     _DisplayFKeyIcon
    0000028C <00000000>             .DATA.L     _locate
    00000290 <00000000>             .DATA.L     _Print
    00000294 <00000000>             .DATA.L     L401
    00000298 <00000000>             .DATA.L     L402
    0000029C <00000000>             .DATA.L     L403
    000002A0 <00000000>             .DATA.L     L404
    000002A4 <00000000>             .DATA.L     L405
    000002A8 <00000000>             .DATA.L     L406
    000002AC <00000000>             .DATA.L     L407
    000002B0 <00000000>             .DATA.L     _Keyboard_PutKeycode
    000002B4 <00000000>             .DATA.L     _Serial_WriteBytes
    000002B8 <00000000>             .DATA.L     _Sleep
    000002BC <00000000>             .DATA.L     _MsgBuffer
    000002C0 <00000000>             .DATA.L     _MsgLength
    000002C4 <00000000>             .DATA.L     _ReservedBufferBis
    000002C8 <00000000>             .DATA.L     _GetKey
    000002CC <00000000>             .DATA.L     _window
    000002D0 <00000000>             .DATA.L     L416
    000002D4 <00000000>             .DATA.L     _DisplayMessageBox
    000002D8              L559:                             
          Test.c   158                }
          Test.c   159    
          Test.c   160                if (key == KEY_CTRL_F1) {       //Start serial comunication with the ESP32 at 9600 bps if F1 i
                         +s pressed
    000002D8 935F                   MOV.W       L651,R3    ; H'7539
    000002DA 62F2                   MOV.L       @R15,R2
    000002DC 3230                   CMP/EQ      R3,R2
    000002DE 8B13                   BF          L561
          Test.c   161                    if (Serial_IsOpen() != 1) {
    000002E0 D231                   MOV.L       L651+14,R2 ; _Serial_IsOpen
    000002E2 420B                   JSR         @R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002E4 0009                   NOP
    000002E6 8801                   CMP/EQ      #1,R0
    000002E8 890B                   BT          L562
          Test.c   162                        unsigned char mode[6] = {0, 5, 0, 0, 0, 0};    // 9600 bps 8n1
    000002EA 9157                   MOV.W       L651+2,R1  ; H'1020
    000002EC D22F                   MOV.L       L651+18,R2 ; L420
    000002EE 31FC                   ADD         R15,R1
    000002F0 D32F                   MOV.L       L651+22,R3 ; __slow_mvn
    000002F2 430B                   JSR         @R3
    000002F4 E006                   MOV         #6,R0
          Test.c   163                        Serial_Open(mode);
    000002F6 9451                   MOV.W       L651+2,R4  ; H'1020
    000002F8 D12E                   MOV.L       L651+26,R1 ; _Serial_Open
    000002FA 410B                   JSR         @R1
    000002FC 34FC                   ADD         R15,R4
    000002FE A003                   BRA         L561
    00000300 0009                   NOP
    00000302              L562:                             
          Test.c   164                    }else {
          Test.c   165                        Serial_Close(1);
    00000302 D22D                   MOV.L       L651+30,R2 ; _Serial_Close
    00000304 420B                   JSR         @R2
    00000306 E401                   MOV         #1,R4
    00000308              L561:                             
          Test.c   166                    }
          Test.c   167                }
          Test.c   168    
          Test.c   169                if (key == KEY_CTRL_F5) {       
    00000308 9449                   MOV.W       L651+4,R4  ; H'753D
    0000030A 63F2                   MOV.L       @R15,R3
    0000030C 3340                   CMP/EQ      R4,R3
    0000030E 8B07                   BF          L564
          Test.c   170                    Serial_ClearTransmitBuffer();
    00000310 D12A                   MOV.L       L651+34,R1 ; _Serial_ClearTransmitBuffer
    00000312 410B                   JSR         @R1
    00000314 0009                   NOP
          Test.c   171                    Serial_WriteBytes("&Rst&", 6);
    00000316 D42A                   MOV.L       L651+38,R4 ; L423
    00000318 480B                   JSR         @R8
    0000031A E506                   MOV         #6,R5
          Test.c   172                    Sleep(10);
    0000031C 490B                   JSR         @R9
    0000031E E40A                   MOV         #10,R4
    00000320              L564:                             
          Test.c   173                }
          Test.c   174    
          Test.c   175                if(Serial_IsOpen() == 1){       //check if the serial is open
    00000320 D321                   MOV.L       L651+14,R3 ; _Serial_IsOpen
    00000322 430B                   JSR         @R3
    00000324 0009                   NOP
    00000326 8801                   CMP/EQ      #1,R0
    00000328 8B0E                   BF          L565
          Test.c   176                    unsigned char* iresult;
          Test.c   177                    GetFKeyIconPointer(267, &iresult);
    0000032A 65F3                   MOV         R15,R5
    0000032C 9438                   MOV.W       L651+6,R4  ; H'010B
    0000032E D325                   MOV.L       L651+42,R3 ; _GetFKeyIconPointer




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000330 430B                   JSR         @R3
    00000332 751C                   ADD         #28,R5
          Test.c   178                    DisplayFKeyIcon(0, iresult);       //F1
    00000334 55F7                   MOV.L       @(28,R15),R5
    00000336 D324                   MOV.L       L651+46,R3 ; _DisplayFKeyIcon
    00000338 430B                   JSR         @R3
    0000033A E400                   MOV         #0,R4
          Test.c   179                    locate(1,6);
    0000033C E506                   MOV         #6,R5
    0000033E 4B0B                   JSR         @R11
    00000340 E401                   MOV         #1,R4
          Test.c   180                    Print((unsigned char*)"ESP32 connected    ");
    00000342 D422                   MOV.L       L651+50,R4 ; L426
    00000344 A00D                   BRA         L642
    00000346 0009                   NOP
    00000348              L565:                             
          Test.c   181                }else{                          //This execute if the serial is closed
          Test.c   182                    unsigned char* iresult;
          Test.c   183                    GetFKeyIconPointer(0x0165, &iresult);
    00000348 942B                   MOV.W       L651+8,R4  ; H'0165
    0000034A 65F3                   MOV         R15,R5
    0000034C D31D                   MOV.L       L651+42,R3 ; _GetFKeyIconPointer
    0000034E 430B                   JSR         @R3
    00000350 7518                   ADD         #24,R5
          Test.c   184                    DisplayFKeyIcon(0, iresult);       //F1
    00000352 55F6                   MOV.L       @(24,R15),R5
    00000354 D31C                   MOV.L       L651+46,R3 ; _DisplayFKeyIcon
    00000356 430B                   JSR         @R3
    00000358 E400                   MOV         #0,R4
          Test.c   185                    locate(1,6);
    0000035A E506                   MOV         #6,R5
    0000035C 4B0B                   JSR         @R11
    0000035E E401                   MOV         #1,R4
          Test.c   186                    Print((unsigned char*)"ESP32 disconnected");
    00000360 D41B                   MOV.L       L651+54,R4 ; L406
    00000362              L642:                             
    00000362 4A0B                   JSR         @R10
    00000364 0009                   NOP
          Test.c   187                }
          Test.c   188    
          Test.c   189                if(key == KEY_CTRL_F2){         //Send signal to ESP32 to blink the exam led if F2 is pressed
    00000366 921D                   MOV.W       L651+10,R2 ; H'753A
    00000368 63F2                   MOV.L       @R15,R3
    0000036A 3320                   CMP/EQ      R2,R3
    0000036C 8B4B                   BF          L567
    0000036E D319                   MOV.L       L651+58,R3 ; _IsExam
    00000370 6432                   MOV.L       @R3,R4
    00000372 2448                   TST         R4,R4
    00000374 8B34                   BF          L568
          Test.c   190                    if(IsExam == 0){
          Test.c   191                        Serial_ClearTransmitBuffer();
    00000376 D111                   MOV.L       L651+34,R1 ; _Serial_ClearTransmitBuffer
    00000378 410B                   JSR         @R1
    0000037A 0009                   NOP
          Test.c   192                        Serial_WriteBytes("&ExmOn&", 8);
    0000037C D416                   MOV.L       L651+62,R4 ; L431
    0000037E 480B                   JSR         @R8




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000380 E508                   MOV         #8,R5
          Test.c   193                        Sleep(10);
    00000382 490B                   JSR         @R9
    00000384 E40A                   MOV         #10,R4
          Test.c   194                        locate(1,7);
    00000386 E507                   MOV         #7,R5
    00000388 4B0B                   JSR         @R11
    0000038A E401                   MOV         #1,R4
          Test.c   195                        Print((unsigned char*)"Exam mode on     ");
    0000038C D413                   MOV.L       L651+66,R4 ; L432
    0000038E 4A0B                   JSR         @R10
    00000390 0009                   NOP
          Test.c   196                        IsExam = 1;
    00000392 E301                   MOV         #1,R3
    00000394 D20F                   MOV.L       L651+58,R2 ; _IsExam
    00000396 A036                   BRA         L567
    00000398 2232                   MOV.L       R3,@R2
    0000039A              L651:                             
    0000039A 7539                   .DATA.W     H'7539
    0000039C 1020                   .DATA.W     H'1020
    0000039E 753D                   .DATA.W     H'753D
    000003A0 010B                   .DATA.W     H'010B
    000003A2 0165                   .DATA.W     H'0165
    000003A4 753A                   .DATA.W     H'753A
    000003A6 0000                   .DATA.W     0
    000003A8 <00000000>             .DATA.L     _Serial_IsOpen
    000003AC <00000000>             .DATA.L     L420
    000003B0 <00000000>             .DATA.L     __slow_mvn
    000003B4 <00000000>             .DATA.L     _Serial_Open
    000003B8 <00000000>             .DATA.L     _Serial_Close
    000003BC <00000000>             .DATA.L     _Serial_ClearTransmitBuffer
    000003C0 <00000000>             .DATA.L     L423
    000003C4 <00000000>             .DATA.L     _GetFKeyIconPointer
    000003C8 <00000000>             .DATA.L     _DisplayFKeyIcon
    000003CC <00000000>             .DATA.L     L426
    000003D0 <00000000>             .DATA.L     L406
    000003D4 <00000000>             .DATA.L     _IsExam
    000003D8 <00000000>             .DATA.L     L431
    000003DC <00000000>             .DATA.L     L432
    000003E0              L568:                             
          Test.c   197                    }
          Test.c   198                    else if(IsExam == 1){       //Send signal to ESP32 to stop blinking the exam led
    000003E0 6043                   MOV         R4,R0
    000003E2 8801                   CMP/EQ      #1,R0
    000003E4 8B0F                   BF          L567
          Test.c   199                        Serial_ClearTransmitBuffer();
    000003E6 D127                   MOV.L       L652+4,R1  ; _Serial_ClearTransmitBuffer
    000003E8 410B                   JSR         @R1
    000003EA 0009                   NOP
          Test.c   200                        Serial_WriteBytes("&ExmOff&", 9);
    000003EC D426                   MOV.L       L652+8,R4  ; L434
    000003EE 480B                   JSR         @R8
    000003F0 E509                   MOV         #9,R5
          Test.c   201                        Sleep(10);
    000003F2 490B                   JSR         @R9
    000003F4 E40A                   MOV         #10,R4
          Test.c   202                        locate(1,7);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003F6 E507                   MOV         #7,R5
    000003F8 4B0B                   JSR         @R11
    000003FA E401                   MOV         #1,R4
          Test.c   203                        Print((unsigned char*)"Exam mode off    ");
    000003FC D423                   MOV.L       L652+12,R4 ; L407
    000003FE 4A0B                   JSR         @R10
    00000400 0009                   NOP
          Test.c   204                        IsExam = 0;
    00000402 D323                   MOV.L       L652+16,R3 ; _IsExam
    00000404 23D2                   MOV.L       R13,@R3
    00000406              L567:                             
          Test.c   205                    }
          Test.c   206                }
          Test.c   207    
          Test.c   208                if(key == KEY_CTRL_F3){         //Open test mode if F3 is pressed
    00000406 943B                   MOV.W       L652,R4    ; H'753B
    00000408 62F2                   MOV.L       @R15,R2
    0000040A 3240                   CMP/EQ      R4,R2
    0000040C 8B28                   BF          L571
          Test.c   209                    
          Test.c   210                    if(IsSleeping == 0){
    0000040E D321                   MOV.L       L652+20,R3 ; _IsSleeping
    00000410 6132                   MOV.L       @R3,R1
    00000412 2118                   TST         R1,R1
    00000414 8B11                   BF          L572
          Test.c   211                        
          Test.c   212                        locate(1,3);
    00000416 E503                   MOV         #3,R5
    00000418 4B0B                   JSR         @R11
    0000041A E401                   MOV         #1,R4
          Test.c   213                        Print((unsigned char*)"F3:power on ESP32  ");
    0000041C D41E                   MOV.L       L652+24,R4 ; L437
    0000041E 4A0B                   JSR         @R10
    00000420 0009                   NOP
          Test.c   214                        IsExam = 0; 
          Test.c   215                        IsSleeping=1;
    00000422 E301                   MOV         #1,R3
    00000424 D11B                   MOV.L       L652+20,R1 ; _IsSleeping
    00000426 D21A                   MOV.L       L652+16,R2 ; _IsExam
          Test.c   216                        Serial_WriteBytes("&Sleep&", 8);
    00000428 D41C                   MOV.L       L652+28,R4 ; L438
    0000042A 22D2                   MOV.L       R13,@R2
    0000042C 2132                   MOV.L       R3,@R1
    0000042E 480B                   JSR         @R8
    00000430 E508                   MOV         #8,R5
          Test.c   217                        Sleep(10);
    00000432 490B                   JSR         @R9
    00000434 E40A                   MOV         #10,R4
    00000436 A013                   BRA         L571
    00000438 0009                   NOP
    0000043A              L572:                             
          Test.c   218    
          Test.c   219                    }else if(IsSleeping == 1){
    0000043A 6032                   MOV.L       @R3,R0
    0000043C 8801                   CMP/EQ      #1,R0
    0000043E 8B0F                   BF          L571
          Test.c   220                        locate(1,3);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000440 E503                   MOV         #3,R5
    00000442 4B0B                   JSR         @R11
    00000444 E401                   MOV         #1,R4
          Test.c   221                        Print((unsigned char*)"F3:power off ESP32  ");
    00000446 D416                   MOV.L       L652+32,R4 ; L440
    00000448 4A0B                   JSR         @R10
    0000044A 0009                   NOP
          Test.c   222                        IsSleeping=0;
    0000044C D311                   MOV.L       L652+20,R3 ; _IsSleeping
          Test.c   223                        Serial_ClearTransmitBuffer();
    0000044E D20D                   MOV.L       L652+4,R2  ; _Serial_ClearTransmitBuffer
    00000450 420B                   JSR         @R2
    00000452 23D2                   MOV.L       R13,@R3
          Test.c   224                        Serial_WriteBytes("&SleepEXIT&", 12);
    00000454 D413                   MOV.L       L652+36,R4 ; L441
    00000456 480B                   JSR         @R8
    00000458 E50C                   MOV         #12,R5
          Test.c   225                        Sleep(1000);
    0000045A 9412                   MOV.W       L652+2,R4  ; H'03E8
    0000045C 490B                   JSR         @R9
    0000045E 0009                   NOP
    00000460              L571:                             
    00000460 D30C                   MOV.L       L652+20,R3 ; _IsSleeping
    00000462 6432                   MOV.L       @R3,R4
    00000464 2448                   TST         R4,R4
    00000466 8B1F                   BF          L575
    00000468 910A                   MOV.W       L652,R1    ; H'753B
    0000046A 62F2                   MOV.L       @R15,R2
    0000046C 3210                   CMP/EQ      R1,R2
    0000046E 891B                   BT          L575
          Test.c   226                    }
          Test.c   227                }
          Test.c   228    
          Test.c   229                if(IsSleeping == 0 && key != KEY_CTRL_F3){
          Test.c   230                    locate(1,3);
    00000470 E503                   MOV         #3,R5
    00000472 4B0B                   JSR         @R11
    00000474 E401                   MOV         #1,R4
          Test.c   231                    Print((unsigned char*)"F3:power off ESP32  ");
    00000476 D40A                   MOV.L       L652+32,R4 ; L440
    00000478 4A0B                   JSR         @R10
    0000047A 0009                   NOP
    0000047C A02F                   BRA         L576
    0000047E 0009                   NOP
    00000480              L652:                             
    00000480 753B                   .DATA.W     H'753B
    00000482 03E8                   .DATA.W     H'03E8
    00000484 <00000000>             .DATA.L     _Serial_ClearTransmitBuffer
    00000488 <00000000>             .DATA.L     L434
    0000048C <00000000>             .DATA.L     L407
    00000490 <00000000>             .DATA.L     _IsExam
    00000494 <00000000>             .DATA.L     _IsSleeping
    00000498 <00000000>             .DATA.L     L437
    0000049C <00000000>             .DATA.L     L438
    000004A0 <00000000>             .DATA.L     L440
    000004A4 <00000000>             .DATA.L     L441
    000004A8              L575:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Test.c   232                }else if(IsSleeping == 1 && ( key == KEY_CTRL_F2 || key == KEY_CTRL_F1)){
    000004A8 6043                   MOV         R4,R0
    000004AA 8801                   CMP/EQ      #1,R0
    000004AC 8B17                   BF          L576
    000004AE 9339                   MOV.W       L653,R3    ; H'753A
    000004B0 62F2                   MOV.L       @R15,R2
    000004B2 3230                   CMP/EQ      R3,R2
    000004B4 8903                   BT          L578
    000004B6 9236                   MOV.W       L653+2,R2  ; H'7539
    000004B8 61F2                   MOV.L       @R15,R1
    000004BA 3120                   CMP/EQ      R2,R1
    000004BC 8B0F                   BF          L576
    000004BE              L578:                             
          Test.c   233                    locate(1,3);
    000004BE E503                   MOV         #3,R5
    000004C0 4B0B                   JSR         @R11
    000004C2 E401                   MOV         #1,R4
          Test.c   234                    Print((unsigned char*)"F3:power off ESP32  ");
    000004C4 D41A                   MOV.L       L653+12,R4 ; L440
    000004C6 4A0B                   JSR         @R10
    000004C8 0009                   NOP
          Test.c   235                    IsSleeping=0;
    000004CA D31A                   MOV.L       L653+16,R3 ; _IsSleeping
          Test.c   236                    Serial_ClearTransmitBuffer();
    000004CC D21A                   MOV.L       L653+20,R2 ; _Serial_ClearTransmitBuffer
    000004CE 420B                   JSR         @R2
    000004D0 23D2                   MOV.L       R13,@R3
          Test.c   237                    Serial_WriteBytes("&SleepEXIT&", 12);
    000004D2 D41A                   MOV.L       L653+24,R4 ; L441
    000004D4 480B                   JSR         @R8
    000004D6 E50C                   MOV         #12,R5
          Test.c   238                    Sleep(1000);
    000004D8 9426                   MOV.W       L653+4,R4  ; H'03E8
    000004DA 490B                   JSR         @R9
    000004DC 0009                   NOP
    000004DE              L576:                             
          Test.c   239                }
          Test.c   240    
          Test.c   241                if(key == KEY_CTRL_F4){         //Open BT list if F4 is pressed
    000004DE 9424                   MOV.W       L653+6,R4  ; H'753C
    000004E0 63F2                   MOV.L       @R15,R3
    000004E2 3340                   CMP/EQ      R4,R3
    000004E4 8B04                   BF          L558
          Test.c   242                    
          Test.c   243                    OpenBTList();
    000004E6 BD8B                   BSR         _OpenBTList
    000004E8 0009                   NOP
          Test.c   244                    window = 1;
    000004EA E201                   MOV         #1,R2
    000004EC D114                   MOV.L       L653+28,R1 ; _window
    000004EE 2122                   MOV.L       R2,@R1
    000004F0              L558:                             
          Test.c   245                }
          Test.c   246            }
          Test.c   247    
          Test.c   248            if(window == 1){
    000004F0 D313                   MOV.L       L653+28,R3 ; _window




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004F2 6032                   MOV.L       @R3,R0
    000004F4 8801                   CMP/EQ      #1,R0
    000004F6 8901                   BT          L654
    000004F8 A160                   BRA         L580
    000004FA 0009                   NOP
    000004FC              L654:                             
          Test.c   249                if (key == KEY_CTRL_F2) {
    000004FC 9112                   MOV.W       L653,R1    ; H'753A
    000004FE 62F2                   MOV.L       @R15,R2
    00000500 3210                   CMP/EQ      R1,R2
    00000502 8B33                   BF          L581
          Test.c   250    
          Test.c   251                    unsigned char* iresult3;
          Test.c   252                    if(isLowercase == 1){
    00000504 D20F                   MOV.L       L653+32,R2 ; _isLowercase
    00000506 6022                   MOV.L       @R2,R0
    00000508 8801                   CMP/EQ      #1,R0
    0000050A 8B21                   BF          L582
          Test.c   253                        GetFKeyIconPointer(1060, &iresult3);
    0000050C 940E                   MOV.W       L653+8,R4  ; H'0424
    0000050E 65F3                   MOV         R15,R5
    00000510 D30D                   MOV.L       L653+36,R3 ; _GetFKeyIconPointer
    00000512 430B                   JSR         @R3
    00000514 7508                   ADD         #8,R5
          Test.c   254                        DisplayFKeyIcon(1, iresult3);
    00000516 55F2                   MOV.L       @(8,R15),R5
    00000518 D30C                   MOV.L       L653+40,R3 ; _DisplayFKeyIcon
    0000051A 430B                   JSR         @R3
    0000051C E401                   MOV         #1,R4
          Test.c   255                        isLowercase = 0;
    0000051E D209                   MOV.L       L653+32,R2 ; _isLowercase
    00000520 A024                   BRA         L581
    00000522 22D2                   MOV.L       R13,@R2
    00000524              L653:                             
    00000524 753A                   .DATA.W     H'753A
    00000526 7539                   .DATA.W     H'7539
    00000528 03E8                   .DATA.W     H'03E8
    0000052A 753C                   .DATA.W     H'753C
    0000052C 0424                   .DATA.W     H'0424
    0000052E 0000                   .DATA.W     0
    00000530 <00000000>             .DATA.L     L440
    00000534 <00000000>             .DATA.L     _IsSleeping
    00000538 <00000000>             .DATA.L     _Serial_ClearTransmitBuffer
    0000053C <00000000>             .DATA.L     L441
    00000540 <00000000>             .DATA.L     _window
    00000544 <00000000>             .DATA.L     _isLowercase
    00000548 <00000000>             .DATA.L     _GetFKeyIconPointer
    0000054C <00000000>             .DATA.L     _DisplayFKeyIcon
    00000550              L582:                             
          Test.c   256                    }else if(isLowercase == 0){
    00000550 2008                   TST         R0,R0
    00000552 8B0B                   BF          L581
          Test.c   257                        
          Test.c   258                        GetFKeyIconPointer(1061, &iresult3);
    00000554 9449                   MOV.W       L655,R4    ; H'0425
    00000556 65F3                   MOV         R15,R5
    00000558 D325                   MOV.L       L655+6,R3  ; _GetFKeyIconPointer




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000055A 430B                   JSR         @R3
    0000055C 7508                   ADD         #8,R5
          Test.c   259                        DisplayFKeyIcon(1, iresult3);
    0000055E 55F2                   MOV.L       @(8,R15),R5
    00000560 D324                   MOV.L       L655+10,R3 ; _DisplayFKeyIcon
    00000562 430B                   JSR         @R3
    00000564 E401                   MOV         #1,R4
          Test.c   260                        isLowercase = 1;
    00000566 E201                   MOV         #1,R2
    00000568 D323                   MOV.L       L655+14,R3 ; _isLowercase
    0000056A 2322                   MOV.L       R2,@R3
    0000056C              L581:                             
          Test.c   261                    }
          Test.c   262                }
          Test.c   263                if(((key >= 65 && key <= 90) || (key >= 48 && key <= 57)) && IsTyping == 1){
    0000056C 60F2                   MOV.L       @R15,R0
    0000056E E141                   MOV         #65,R1
    00000570 3012                   CMP/HS      R1,R0
    00000572 8B03                   BF          L587
    00000574 63F2                   MOV.L       @R15,R3
    00000576 E25A                   MOV         #90,R2
    00000578 3326                   CMP/HI      R2,R3
    0000057A 8B07                   BF          L586
    0000057C              L587:                             
    0000057C 63F2                   MOV.L       @R15,R3
    0000057E E130                   MOV         #48,R1
    00000580 3312                   CMP/HS      R1,R3
    00000582 8B43                   BF          L585
    00000584 62F2                   MOV.L       @R15,R2
    00000586 E339                   MOV         #57,R3
    00000588 3236                   CMP/HI      R3,R2
    0000058A 893F                   BT          L585
    0000058C              L586:                             
    0000058C D11B                   MOV.L       L655+18,R1 ; _IsTyping
    0000058E 6012                   MOV.L       @R1,R0
    00000590 8801                   CMP/EQ      #1,R0
    00000592 8B3B                   BF          L585
          Test.c   264    
          Test.c   265                    
          Test.c   266                    char buffer[12];
          Test.c   267                    locate(MsgLength,4);
    00000594 E504                   MOV         #4,R5
    00000596 4B0B                   JSR         @R11
    00000598 64E2                   MOV.L       @R14,R4
          Test.c   268                    if(isLowercase == 0){
    0000059A D317                   MOV.L       L655+14,R3 ; _isLowercase
    0000059C 6232                   MOV.L       @R3,R2
    0000059E 2228                   TST         R2,R2
    000005A0 890E                   BT          L517
          Test.c   269                        sprintf(buffer, "%c", key);         //If the input is upper case, get the normal input
          Test.c   270                    }else if(key >= 65 && key <= 90){
    000005A2 E241                   MOV         #65,R2
    000005A4 61F2                   MOV.L       @R15,R1
    000005A6 3122                   CMP/HS      R2,R1
    000005A8 8B0A                   BF          L517
    000005AA E15A                   MOV         #90,R1
    000005AC 60F2                   MOV.L       @R15,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005AE 3016                   CMP/HI      R1,R0
    000005B0 8906                   BT          L517
          Test.c   271                        sprintf(buffer, "%c", (key+32));    //if the input is a number and upper case, get the
                         + input + 32 to be in lower case
    000005B2 62F2                   MOV.L       @R15,R2
    000005B4 D312                   MOV.L       L655+22,R3 ; L453
    000005B6 7220                   ADD         #32,R2
    000005B8 2F26                   MOV.L       R2,@-R15
    000005BA 2F36                   MOV.L       R3,@-R15
    000005BC A004                   BRA         L643
    000005BE 0009                   NOP
    000005C0              L517:
          Test.c   272                    }else{
          Test.c   273                        sprintf(buffer, "%c", key);
    000005C0 62F2                   MOV.L       @R15,R2
    000005C2 2F26                   MOV.L       R2,@-R15
    000005C4 D30E                   MOV.L       L655+22,R3 ; L453
    000005C6 2F36                   MOV.L       R3,@-R15
    000005C8              L643:                             
    000005C8 9410                   MOV.W       L655+2,R4  ; H'1024
    000005CA D20E                   MOV.L       L655+26,R2 ; _sprintf
    000005CC 420B                   JSR         @R2
    000005CE 34FC                   ADD         R15,R4
          Test.c   274                    }
          Test.c   275                    Print(buffer);
    000005D0 940D                   MOV.W       L655+4,R4  ; H'101C
    000005D2 7F08                   ADD         #8,R15
    000005D4 4A0B                   JSR         @R10
    000005D6 34FC                   ADD         R15,R4
          Test.c   276                    strncat(MsgBuffer, &buffer, 1);
    000005D8 55F8                   MOV.L       @(32,R15),R5
    000005DA E601                   MOV         #1,R6
    000005DC D30A                   MOV.L       L655+30,R3 ; _strncat
    000005DE 430B                   JSR         @R3
    000005E0 64C3                   MOV         R12,R4
          Test.c   277                    MsgLength++;
    000005E2 62E2                   MOV.L       @R14,R2
    000005E4 7201                   ADD         #1,R2
    000005E6 A037                   BRA         L592
    000005E8 2E22                   MOV.L       R2,@R14
    000005EA              L655:                             
    000005EA 0425                   .DATA.W     H'0425
    000005EC 1024                   .DATA.W     H'1024
    000005EE 101C                   .DATA.W     H'101C
    000005F0 <00000000>             .DATA.L     _GetFKeyIconPointer
    000005F4 <00000000>             .DATA.L     _DisplayFKeyIcon
    000005F8 <00000000>             .DATA.L     _isLowercase
    000005FC <00000000>             .DATA.L     _IsTyping
    00000600 <00000000>             .DATA.L     L453
    00000604 <00000000>             .DATA.L     _sprintf
    00000608 <00000000>             .DATA.L     _strncat
    0000060C              L585:                             
          Test.c   278                }
          Test.c   279                else if((key == KEY_CTRL_DEL) && IsTyping == 1){
    0000060C 9166                   MOV.W       L656,R1    ; H'7549
    0000060E 63F2                   MOV.L       @R15,R3
    00000610 3310                   CMP/EQ      R1,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000612 8B21                   BF          L592
    00000614 D333                   MOV.L       L656+8,R3  ; _IsTyping
    00000616 6032                   MOV.L       @R3,R0
    00000618 8801                   CMP/EQ      #1,R0
    0000061A 8B1D                   BF          L592
          Test.c   280                    if(MsgLength > 3){
    0000061C 62E2                   MOV.L       @R14,R2
    0000061E E103                   MOV         #3,R1
    00000620 3217                   CMP/GT      R1,R2
    00000622 8B19                   BF          L592
          Test.c   281                        MsgLength--;
    00000624 60E2                   MOV.L       @R14,R0
          Test.c   282                        locate(MsgLength,4);
    00000626 E504                   MOV         #4,R5
    00000628 70FF                   ADD         #-1,R0
    0000062A 2E02                   MOV.L       R0,@R14
    0000062C 4B0B                   JSR         @R11
    0000062E 6403                   MOV         R0,R4
          Test.c   283                        Print((unsigned char*)" ");
    00000630 D42D                   MOV.L       L656+12,R4 ; L458
    00000632 4A0B                   JSR         @R10
    00000634 0009                   NOP
          Test.c   284                        strcpy(&MsgBuffer[strlen(MsgBuffer)-1], &MsgBuffer[strlen(MsgBuffer)]);
    00000636 D32D                   MOV.L       L656+16,R3 ; _strlen
    00000638 430B                   JSR         @R3
    0000063A 64C3                   MOV         R12,R4
    0000063C D22B                   MOV.L       L656+16,R2 ; _strlen
    0000063E 63C3                   MOV         R12,R3
    00000640 330C                   ADD         R0,R3
    00000642 2F36                   MOV.L       R3,@-R15
    00000644 420B                   JSR         @R2
    00000646 64C3                   MOV         R12,R4
    00000648 D329                   MOV.L       L656+20,R3 ; __slow_strcpy
    0000064A 30CC                   ADD         R12,R0
    0000064C 70FF                   ADD         #-1,R0
    0000064E 430B                   JSR         @R3
    00000650 61F6                   MOV.L       @R15+,R1
          Test.c   285                        locate(MsgLength,4);
    00000652 E504                   MOV         #4,R5
    00000654 4B0B                   JSR         @R11
    00000656 64E2                   MOV.L       @R14,R4
    00000658              L592:                             
          Test.c   286                    }
          Test.c   287                }
          Test.c   288                if((key == KEY_CTRL_EXE) && IsTyping == 1){
    00000658 9241                   MOV.W       L656+2,R2  ; H'7534
    0000065A 63F2                   MOV.L       @R15,R3
    0000065C 3320                   CMP/EQ      R2,R3
    0000065E 8901                   BT          L657
    00000660 A091                   BRA         L595
    00000662 0009                   NOP
    00000664              L657:                             
    00000664 D31F                   MOV.L       L656+8,R3  ; _IsTyping
    00000666 6032                   MOV.L       @R3,R0
    00000668 8801                   CMP/EQ      #1,R0
    0000066A 8901                   BT          L658
    0000066C A08B                   BRA         L595




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000066E 0009                   NOP
    00000670              L658:                             
          Test.c   289                    IsTyping = 0;
    00000670 D21C                   MOV.L       L656+8,R2  ; _IsTyping
    00000672 22D2                   MOV.L       R13,@R2
          Test.c   290                    if(strlen(MsgBuffer) == 0){
    00000674 D31D                   MOV.L       L656+16,R3 ; _strlen
    00000676 430B                   JSR         @R3
    00000678 64C3                   MOV         R12,R4
    0000067A 2008                   TST         R0,R0
    0000067C 8B04                   BF          L596
          Test.c   291                        DisplayErrorMessage(20);
    0000067E D31D                   MOV.L       L656+24,R3 ; _DisplayErrorMessage
    00000680 430B                   JSR         @R3
    00000682 E414                   MOV         #20,R4
    00000684 A07F                   BRA         L595
    00000686 0009                   NOP
    00000688              L596:                             
          Test.c   292                    }else{
          Test.c   293                        
          Test.c   294                        int IsConnected = 0;
          Test.c   295    
          Test.c   296                        char *ReservedBuffer[1024];
          Test.c   297                        short *recSize;
          Test.c   298                        int CountExcess = 0;
          Test.c   299    
          Test.c   300                        char *ReservedBufferBisPointer = &ReservedBufferBis;
          Test.c   301                        short* recSizeBis;
          Test.c   302    
          Test.c   303    
          Test.c   304                        Cursor_SetFlashOff();
    00000688 D31B                   MOV.L       L656+28,R3 ; _Cursor_SetFlashOff
    0000068A 430B                   JSR         @R3
    0000068C 1FD3                   MOV.L       R13,@(12,R15)
          Test.c   305    
          Test.c   306    
          Test.c   307                        //******************************************** ConnectBT *****************************
                         +****************//
          Test.c   308    
          Test.c   309    
          Test.c   310                        Serial_ClearTransmitBuffer();
    0000068E D21B                   MOV.L       L656+32,R2 ; _Serial_ClearTransmitBuffer
    00000690 420B                   JSR         @R2
    00000692 0009                   NOP
          Test.c   311                        Serial_WriteBytes("&ConnectBT&", 12);    //send signal to the ESP32 to connect
    00000694 D41A                   MOV.L       L656+36,R4 ; L468
    00000696 480B                   JSR         @R8
    00000698 E50C                   MOV         #12,R5
          Test.c   312                        Sleep(10);
          Test.c   313                        while(Serial_ReadBytes(ReservedBuffer, 1024, recSize) == 1){     //waiting for a respo
                         +nse
    0000069A A007                   BRA         L644
    0000069C E40A                   MOV         #10,R4
    0000069E              L599:                             
          Test.c   314                            CountExcess++;
          Test.c   315                            if(CountExcess >= 5){                              //TimeOut
    0000069E E305                   MOV         #5,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006A0 52F3                   MOV.L       @(12,R15),R2
    000006A2 7201                   ADD         #1,R2
    000006A4 3233                   CMP/GE      R3,R2
    000006A6 8D0B                   BT/S        L601
    000006A8 1F23                   MOV.L       R2,@(12,R15)
          Test.c   316                                break;
          Test.c   317                            }
          Test.c   318                            Sleep(1000);
    000006AA 9419                   MOV.W       L656+4,R4  ; H'03E8
    000006AC              L644:                             
    000006AC 490B                   JSR         @R9
    000006AE 0009                   NOP
    000006B0 9517                   MOV.W       L656+6,R5  ; H'0400
    000006B2 64F3                   MOV         R15,R4
    000006B4 D313                   MOV.L       L656+40,R3 ; _Serial_ReadBytes
    000006B6 66F3                   MOV         R15,R6
    000006B8 430B                   JSR         @R3
    000006BA 7428                   ADD         #40,R4
    000006BC 8801                   CMP/EQ      #1,R0
    000006BE 89EE                   BT          L599
    000006C0              L601:                             
          Test.c   319                        }
          Test.c   320    
          Test.c   321                        Serial_ClearTransmitBuffer();
    000006C0 D30E                   MOV.L       L656+32,R3 ; _Serial_ClearTransmitBuffer
    000006C2 430B                   JSR         @R3
    000006C4 0009                   NOP
          Test.c   322                        Serial_WriteBytes(MsgBuffer, strlen(MsgBuffer)+1);              //send the name of the
                         + device to connect to the ESP32
    000006C6 D209                   MOV.L       L656+16,R2 ; _strlen
    000006C8 420B                   JSR         @R2
    000006CA 64C3                   MOV         R12,R4
    000006CC 6503                   MOV         R0,R5
    000006CE 7501                   ADD         #1,R5
    000006D0 480B                   JSR         @R8
    000006D2 64C3                   MOV         R12,R4
          Test.c   323    
          Test.c   324                        Sleep(10);
    000006D4 490B                   JSR         @R9
    000006D6 E40A                   MOV         #10,R4
          Test.c   325                        CountExcess = 0;
          Test.c   326                        while(Serial_ReadBytes(ReservedBufferBisPointer, 1024, recSizeBis) == 1){   //waiting 
                         +for a response
    000006D8 A01F                   BRA         L602
    000006DA 1FD3                   MOV.L       R13,@(12,R15)
    000006DC              L656:                             
    000006DC 7549                   .DATA.W     H'7549
    000006DE 7534                   .DATA.W     H'7534
    000006E0 03E8                   .DATA.W     H'03E8
    000006E2 0400                   .DATA.W     H'0400
    000006E4 <00000000>             .DATA.L     _IsTyping
    000006E8 <00000000>             .DATA.L     L458
    000006EC <00000000>             .DATA.L     _strlen
    000006F0 <00000000>             .DATA.L     __slow_strcpy
    000006F4 <00000000>             .DATA.L     _DisplayErrorMessage
    000006F8 <00000000>             .DATA.L     _Cursor_SetFlashOff
    000006FC <00000000>             .DATA.L     _Serial_ClearTransmitBuffer




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000700 <00000000>             .DATA.L     L468
    00000704 <00000000>             .DATA.L     _Serial_ReadBytes
    00000708              L603:                             
          Test.c   327                            CountExcess++;
    00000708 52F3                   MOV.L       @(12,R15),R2
          Test.c   328                            if(CountExcess >= 12){                                //TimeOut
    0000070A E40C                   MOV         #12,R4
    0000070C 7201                   ADD         #1,R2
    0000070E 3243                   CMP/GE      R4,R2
    00000710 8D0A                   BT/S        L605
    00000712 1F23                   MOV.L       R2,@(12,R15)
          Test.c   329                                break;
          Test.c   330                            }
          Test.c   331                            Sleep(1000);
    00000714 9421                   MOV.W       L659,R4    ; H'03E8
    00000716 490B                   JSR         @R9
    00000718 0009                   NOP
    0000071A              L602:                             
    0000071A 66F3                   MOV         R15,R6
    0000071C 951E                   MOV.W       L659+2,R5  ; H'0400
    0000071E D310                   MOV.L       L659+6,R3  ; _Serial_ReadBytes
    00000720 430B                   JSR         @R3
    00000722 54F4                   MOV.L       @(16,R15),R4
    00000724 8801                   CMP/EQ      #1,R0
    00000726 89EF                   BT          L603
    00000728              L605:                             
          Test.c   332                        }
          Test.c   333    
          Test.c   334    
          Test.c   335                        //************************************************************************************
                         +******************//
          Test.c   336    
          Test.c   337    
          Test.c   338                        locate(1,7);
    00000728 E507                   MOV         #7,R5
    0000072A 4B0B                   JSR         @R11
    0000072C E401                   MOV         #1,R4
          Test.c   339    
          Test.c   340                        if(strcmp(ReservedBufferBis, "&Connect") == 0){            //connected
    0000072E D50D                   MOV.L       L659+10,R5 ; L473
    00000730 D40D                   MOV.L       L659+14,R4 ; _ReservedBufferBis
    00000732 D30E                   MOV.L       L659+18,R3 ; __slow_strcmp1
    00000734 430B                   JSR         @R3
    00000736 0009                   NOP
    00000738 2008                   TST         R0,R0
    0000073A 8B04                   BF          L606
          Test.c   341                            Print((unsigned char*)"Connected !            ");
    0000073C D40C                   MOV.L       L659+22,R4 ; L475
    0000073E 4A0B                   JSR         @R10
    00000740 0009                   NOP
    00000742 A01E                   BRA         L607
    00000744 0009                   NOP
    00000746              L606:                             
          Test.c   342                        }else if(strcmp(ReservedBufferBis, "&Fail") == 0){         //TimeOut
    00000746 D50B                   MOV.L       L659+26,R5 ; L476
    00000748 D407                   MOV.L       L659+14,R4 ; _ReservedBufferBis
    0000074A D208                   MOV.L       L659+18,R2 ; __slow_strcmp1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000074C 420B                   JSR         @R2
    0000074E 0009                   NOP
    00000750 2008                   TST         R0,R0
    00000752 8B13                   BF          L608
          Test.c   343                            Print((unsigned char*)"BT not found           ");
    00000754 D408                   MOV.L       L659+30,R4 ; L478
    00000756 A012                   BRA         L645
    00000758 0009                   NOP
    0000075A              L659:                             
    0000075A 03E8                   .DATA.W     H'03E8
    0000075C 0400                   .DATA.W     H'0400
    0000075E 0000                   .DATA.W     0
    00000760 <00000000>             .DATA.L     _Serial_ReadBytes
    00000764 <00000000>             .DATA.L     L473
    00000768 <00000000>             .DATA.L     _ReservedBufferBis
    0000076C <00000000>             .DATA.L     __slow_strcmp1
    00000770 <00000000>             .DATA.L     L475
    00000774 <00000000>             .DATA.L     L476
    00000778 <00000000>             .DATA.L     L478
    0000077C              L608:                             
          Test.c   344                        }else{
          Test.c   345                            Print((unsigned char*)"Communication error    ");
    0000077C D431                   MOV.L       L660+14,R4 ; L480
    0000077E              L645:                             
    0000077E 4A0B                   JSR         @R10
    00000780 0009                   NOP
    00000782              L607:                             
          Test.c   346                        }
          Test.c   347    
          Test.c   348                        MsgLength = 5;
    00000782 E305                   MOV         #5,R3
    00000784 2E32                   MOV.L       R3,@R14
    00000786              L595:                             
          Test.c   349                    }
          Test.c   350                }
          Test.c   351                if(key == KEY_CTRL_F1){
    00000786 9256                   MOV.W       L660,R2    ; H'7539
    00000788 61F2                   MOV.L       @R15,R1
    0000078A 3120                   CMP/EQ      R2,R1
    0000078C 8B05                   BF          L610
          Test.c   352                    isPressed = 1;
    0000078E E301                   MOV         #1,R3
    00000790 1F35                   MOV.L       R3,@(20,R15)
          Test.c   353                    window = 2;
    00000792 E402                   MOV         #2,R4
    00000794 D32C                   MOV.L       L660+18,R3 ; _window
          Test.c   354                    CreateBTMenu();
    00000796 BC75                   BSR         _CreateBTMenu
    00000798 2342                   MOV.L       R4,@R3
    0000079A              L610:                             
          Test.c   355                }
          Test.c   356                if(key == KEY_CTRL_F6 || key == KEY_CTRL_EXIT){
    0000079A 924D                   MOV.W       L660+2,R2  ; H'753E
    0000079C 61F2                   MOV.L       @R15,R1
    0000079E 3120                   CMP/EQ      R2,R1
    000007A0 8903                   BT          L612
    000007A2 934A                   MOV.W       L660+4,R3  ; H'7532




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007A4 61F2                   MOV.L       @R15,R1
    000007A6 3130                   CMP/EQ      R3,R1
    000007A8 8B08                   BF          L580
    000007AA              L612:                             
          Test.c   357                    Bdisp_AllClr_VRAM();
    000007AA D228                   MOV.L       L660+22,R2 ; _Bdisp_AllClr_VRAM
    000007AC 420B                   JSR         @R2
    000007AE 0009                   NOP
          Test.c   358                    window = 0;
    000007B0 D325                   MOV.L       L660+18,R3 ; _window
          Test.c   359                    Cursor_SetFlashOff();
    000007B2 D227                   MOV.L       L660+26,R2 ; _Cursor_SetFlashOff
    000007B4 420B                   JSR         @R2
    000007B6 23D2                   MOV.L       R13,@R3
          Test.c   360                    MainMenu();
    000007B8 BCCA                   BSR         _MainMenu
    000007BA 0009                   NOP
    000007BC              L580:                             
          Test.c   361                }
          Test.c   362    
          Test.c   363            }
          Test.c   364    
          Test.c   365            if(window == 2){
    000007BC D222                   MOV.L       L660+18,R2 ; _window
    000007BE 6022                   MOV.L       @R2,R0
    000007C0 8802                   CMP/EQ      #2,R0
    000007C2 8901                   BT          L661
    000007C4 AD3C                   BRA         L557
    000007C6 0009                   NOP
    000007C8              L661:                             
          Test.c   366                if(key == KEY_CTRL_F6 || key == KEY_CTRL_EXIT){
    000007C8 9136                   MOV.W       L660+2,R1  ; H'753E
    000007CA 63F2                   MOV.L       @R15,R3
    000007CC 3310                   CMP/EQ      R1,R3
    000007CE 8903                   BT          L615
    000007D0 9333                   MOV.W       L660+4,R3  ; H'7532
    000007D2 60F2                   MOV.L       @R15,R0
    000007D4 3030                   CMP/EQ      R3,R0
    000007D6 8B09                   BF          L614
    000007D8              L615:                             
          Test.c   367                    Bdisp_AllClr_VRAM();
    000007D8 D11C                   MOV.L       L660+22,R1 ; _Bdisp_AllClr_VRAM
    000007DA 410B                   JSR         @R1
    000007DC 0009                   NOP
          Test.c   368                    Cursor_SetFlashOff();
    000007DE D21C                   MOV.L       L660+26,R2 ; _Cursor_SetFlashOff
    000007E0 420B                   JSR         @R2
    000007E2 0009                   NOP
          Test.c   369                    window = 1;
    000007E4 D218                   MOV.L       L660+18,R2 ; _window
    000007E6 E101                   MOV         #1,R1
          Test.c   370                    OpenBTList();
    000007E8 BC0A                   BSR         _OpenBTList
    000007EA 2212                   MOV.L       R1,@R2
    000007EC              L614:                             
          Test.c   371                } 
          Test.c   372    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Test.c   373                if (key == KEY_CTRL_F2) {
    000007EC 9026                   MOV.W       L660+6,R0  ; H'753A
    000007EE 63F2                   MOV.L       @R15,R3
    000007F0 3300                   CMP/EQ      R0,R3
    000007F2 8B35                   BF          L616
          Test.c   374    
          Test.c   375                    unsigned char* iresult3;
          Test.c   376                    if(isLowercase == 1){
    000007F4 D117                   MOV.L       L660+30,R1 ; _isLowercase
    000007F6 6012                   MOV.L       @R1,R0
    000007F8 8801                   CMP/EQ      #1,R0
    000007FA 8B0B                   BF          L617
          Test.c   377                        GetFKeyIconPointer(1060, &iresult3);
    000007FC 941F                   MOV.W       L660+8,R4  ; H'0424
    000007FE 65F3                   MOV         R15,R5
    00000800 D215                   MOV.L       L660+34,R2 ; _GetFKeyIconPointer
    00000802 420B                   JSR         @R2
    00000804 7504                   ADD         #4,R5
          Test.c   378                        DisplayFKeyIcon(1, iresult3);
    00000806 55F1                   MOV.L       @(4,R15),R5
    00000808 D314                   MOV.L       L660+38,R3 ; _DisplayFKeyIcon
    0000080A 430B                   JSR         @R3
    0000080C E401                   MOV         #1,R4
          Test.c   379                        isLowercase = 0;
    0000080E D211                   MOV.L       L660+30,R2 ; _isLowercase
    00000810 A098                   BRA         L620
    00000812 22D2                   MOV.L       R13,@R2
    00000814              L617:                             
          Test.c   380                    }else if(isLowercase == 0){
    00000814 2008                   TST         R0,R0
    00000816 8901                   BT          L662
    00000818 A094                   BRA         L620
    0000081A 0009                   NOP
    0000081C              L662:                             
          Test.c   381                        
          Test.c   382                        GetFKeyIconPointer(1061, &iresult3);
    0000081C 9410                   MOV.W       L660+10,R4 ; H'0425
    0000081E 65F3                   MOV         R15,R5
    00000820 D30D                   MOV.L       L660+34,R3 ; _GetFKeyIconPointer
    00000822 430B                   JSR         @R3
    00000824 7504                   ADD         #4,R5
          Test.c   383                        DisplayFKeyIcon(1, iresult3);
    00000826 55F1                   MOV.L       @(4,R15),R5
    00000828 D30C                   MOV.L       L660+38,R3 ; _DisplayFKeyIcon
    0000082A 430B                   JSR         @R3
    0000082C E401                   MOV         #1,R4
          Test.c   384                        isLowercase = 1;
    0000082E E201                   MOV         #1,R2
    00000830 D308                   MOV.L       L660+30,R3 ; _isLowercase
    00000832 A087                   BRA         L620
    00000834 2322                   MOV.L       R2,@R3
    00000836              L660:                             
    00000836 7539                   .DATA.W     H'7539
    00000838 753E                   .DATA.W     H'753E
    0000083A 7532                   .DATA.W     H'7532
    0000083C 753A                   .DATA.W     H'753A
    0000083E 0424                   .DATA.W     H'0424




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000840 0425                   .DATA.W     H'0425
    00000842 0000                   .DATA.W     0
    00000844 <00000000>             .DATA.L     L480
    00000848 <00000000>             .DATA.L     _window
    0000084C <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    00000850 <00000000>             .DATA.L     _Cursor_SetFlashOff
    00000854 <00000000>             .DATA.L     _isLowercase
    00000858 <00000000>             .DATA.L     _GetFKeyIconPointer
    0000085C <00000000>             .DATA.L     _DisplayFKeyIcon
    00000860              L616:                             
          Test.c   385                    }
          Test.c   386                }
          Test.c   387                
          Test.c   388                else if(((key >= 65 && key <= 90) || (key >= 48 && key <= 57)) && IsTyping == 1){
    00000860 61F2                   MOV.L       @R15,R1
    00000862 E341                   MOV         #65,R3
    00000864 3132                   CMP/HS      R3,R1
    00000866 8B03                   BF          L623
    00000868 61F2                   MOV.L       @R15,R1
    0000086A E25A                   MOV         #90,R2
    0000086C 3126                   CMP/HI      R2,R1
    0000086E 8B07                   BF          L622
    00000870              L623:                             
    00000870 62F2                   MOV.L       @R15,R2
    00000872 E330                   MOV         #48,R3
    00000874 3232                   CMP/HS      R3,R2
    00000876 8B3F                   BF          L621
    00000878 61F2                   MOV.L       @R15,R1
    0000087A E239                   MOV         #57,R2
    0000087C 3126                   CMP/HI      R2,R1
    0000087E 893B                   BT          L621
    00000880              L622:                             
    00000880 D318                   MOV.L       L663+6,R3  ; _IsTyping
    00000882 6032                   MOV.L       @R3,R0
    00000884 8801                   CMP/EQ      #1,R0
    00000886 8B37                   BF          L621
          Test.c   389    
          Test.c   390                    
          Test.c   391                    unsigned char buffer[12];
          Test.c   392                    locate(MsgLength,4);
    00000888 E504                   MOV         #4,R5
    0000088A 4B0B                   JSR         @R11
    0000088C 64E2                   MOV.L       @R14,R4
          Test.c   393                    if(isLowercase == 0){
    0000088E D216                   MOV.L       L663+10,R2 ; _isLowercase
    00000890 6322                   MOV.L       @R2,R3
    00000892 2338                   TST         R3,R3
    00000894 890E                   BT          L516
          Test.c   394                        sprintf(buffer, "%c", key);         //If the input is upper case, get the normal input
          Test.c   395                    }else if(key >= 65 && key <= 90){
    00000896 E341                   MOV         #65,R3
    00000898 61F2                   MOV.L       @R15,R1
    0000089A 3132                   CMP/HS      R3,R1
    0000089C 8B0A                   BF          L516
    0000089E E15A                   MOV         #90,R1
    000008A0 60F2                   MOV.L       @R15,R0
    000008A2 3016                   CMP/HI      R1,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008A4 8906                   BT          L516
          Test.c   396                        sprintf(buffer, "%c", (key+32));    //if the input is a number and upper case, get the
                         + input + 32 to be in lower case
    000008A6 63F2                   MOV.L       @R15,R3
    000008A8 D210                   MOV.L       L663+14,R2 ; L453
    000008AA 7320                   ADD         #32,R3
    000008AC 2F36                   MOV.L       R3,@-R15
    000008AE 2F26                   MOV.L       R2,@-R15
    000008B0 A004                   BRA         L646
    000008B2 0009                   NOP
    000008B4              L516:
          Test.c   397                    }else{
          Test.c   398                        sprintf(buffer, "%c", key);
    000008B4 63F2                   MOV.L       @R15,R3
    000008B6 2F36                   MOV.L       R3,@-R15
    000008B8 D20C                   MOV.L       L663+14,R2 ; L453
    000008BA 2F26                   MOV.L       R2,@-R15
    000008BC              L646:                             
    000008BC 940F                   MOV.W       L663,R4    ; H'1024
    000008BE D30C                   MOV.L       L663+18,R3 ; _sprintf
    000008C0 430B                   JSR         @R3
    000008C2 34FC                   ADD         R15,R4
          Test.c   399                    }
          Test.c   400                    Print(buffer);
    000008C4 940C                   MOV.W       L663+2,R4  ; H'101C
    000008C6 7F08                   ADD         #8,R15
    000008C8 4A0B                   JSR         @R10
    000008CA 34FC                   ADD         R15,R4
          Test.c   401                    strncat(MsgBuffer, &buffer, 1);
    000008CC 55F9                   MOV.L       @(36,R15),R5
    000008CE E601                   MOV         #1,R6
    000008D0 D308                   MOV.L       L663+22,R3 ; _strncat
    000008D2 430B                   JSR         @R3
    000008D4 64C3                   MOV         R12,R4
          Test.c   402                    MsgLength++;
    000008D6 62E2                   MOV.L       @R14,R2
    000008D8 7201                   ADD         #1,R2
    000008DA A033                   BRA         L620
    000008DC 2E22                   MOV.L       R2,@R14
    000008DE              L663:                             
    000008DE 1024                   .DATA.W     H'1024
    000008E0 101C                   .DATA.W     H'101C
    000008E2 0000                   .DATA.W     0
    000008E4 <00000000>             .DATA.L     _IsTyping
    000008E8 <00000000>             .DATA.L     _isLowercase
    000008EC <00000000>             .DATA.L     L453
    000008F0 <00000000>             .DATA.L     _sprintf
    000008F4 <00000000>             .DATA.L     _strncat
    000008F8              L621:                             
          Test.c   403                }
          Test.c   404                else if((key == KEY_CTRL_DEL) && IsTyping == 1){
    000008F8 9183                   MOV.W       L664,R1    ; H'7549
    000008FA 63F2                   MOV.L       @R15,R3
    000008FC 3310                   CMP/EQ      R1,R3
    000008FE 8B21                   BF          L620
    00000900 D342                   MOV.L       L664+10,R3 ; _IsTyping
    00000902 6032                   MOV.L       @R3,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000904 8801                   CMP/EQ      #1,R0
    00000906 8B1D                   BF          L620
          Test.c   405    
          Test.c   406                    if(MsgLength > 3){
    00000908 62E2                   MOV.L       @R14,R2
    0000090A E103                   MOV         #3,R1
    0000090C 3217                   CMP/GT      R1,R2
    0000090E 8B19                   BF          L620
          Test.c   407                        MsgLength--;
    00000910 60E2                   MOV.L       @R14,R0
          Test.c   408                        locate(MsgLength,4);
    00000912 E504                   MOV         #4,R5
    00000914 70FF                   ADD         #-1,R0
    00000916 2E02                   MOV.L       R0,@R14
    00000918 4B0B                   JSR         @R11
    0000091A 6403                   MOV         R0,R4
          Test.c   409                        Print((unsigned char*)" ");
    0000091C D43C                   MOV.L       L664+14,R4 ; L458
    0000091E 4A0B                   JSR         @R10
    00000920 0009                   NOP
          Test.c   410                        strcpy(&MsgBuffer[strlen(MsgBuffer)-1], &MsgBuffer[strlen(MsgBuffer)]);
    00000922 D33C                   MOV.L       L664+18,R3 ; _strlen
    00000924 430B                   JSR         @R3
    00000926 64C3                   MOV         R12,R4
    00000928 D23A                   MOV.L       L664+18,R2 ; _strlen
    0000092A 63C3                   MOV         R12,R3
    0000092C 330C                   ADD         R0,R3
    0000092E 2F36                   MOV.L       R3,@-R15
    00000930 420B                   JSR         @R2
    00000932 64C3                   MOV         R12,R4
    00000934 D338                   MOV.L       L664+22,R3 ; __slow_strcpy
    00000936 30CC                   ADD         R12,R0
    00000938 70FF                   ADD         #-1,R0
    0000093A 430B                   JSR         @R3
    0000093C 61F6                   MOV.L       @R15+,R1
          Test.c   411                        locate(MsgLength,4);
    0000093E E504                   MOV         #4,R5
    00000940 4B0B                   JSR         @R11
    00000942 64E2                   MOV.L       @R14,R4
    00000944              L620:                             
          Test.c   412                    }
          Test.c   413                }
          Test.c   414                if(((key == KEY_CTRL_EXE) || (isPressed*-1+1) * (key == KEY_CTRL_F1)) && IsTyping == 1){
    00000944 925E                   MOV.W       L664+2,R2  ; H'7534
    00000946 63F2                   MOV.L       @R15,R3
    00000948 3320                   CMP/EQ      R2,R3
    0000094A 890C                   BT          L632
    0000094C 53F5                   MOV.L       @(20,R15),R3
    0000094E E101                   MOV         #1,R1
    00000950 9059                   MOV.W       L664+4,R0  ; H'7539
    00000952 3138                   SUB         R3,R1
    00000954 62F2                   MOV.L       @R15,R2
    00000956 3200                   CMP/EQ      R0,R2
    00000958 0029                   MOVT        R0
    0000095A 0107                   MUL.L       R0,R1
    0000095C 011A                   STS         MACL,R1
    0000095E 2118                   TST         R1,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000960 8B01                   BF          L665
    00000962 AC6D                   BRA         L557
    00000964 0009                   NOP
    00000966              L665:                             
    00000966              L632:                             
    00000966 D329                   MOV.L       L664+10,R3 ; _IsTyping
    00000968 6032                   MOV.L       @R3,R0
    0000096A 8801                   CMP/EQ      #1,R0
    0000096C 8901                   BT          L666
    0000096E AC67                   BRA         L557
    00000970 0009                   NOP
    00000972              L666:                             
          Test.c   415    
          Test.c   416                    IsTyping = 0;
    00000972 D126                   MOV.L       L664+10,R1 ; _IsTyping
          Test.c   417                    if(strlen(MsgBuffer) == 0){
    00000974 D327                   MOV.L       L664+18,R3 ; _strlen
    00000976 21D2                   MOV.L       R13,@R1
    00000978 430B                   JSR         @R3
    0000097A 64C3                   MOV         R12,R4
    0000097C 2008                   TST         R0,R0
    0000097E 8B04                   BF          L633
          Test.c   418                        DisplayErrorMessage(20);
    00000980 D326                   MOV.L       L664+26,R3 ; _DisplayErrorMessage
    00000982 430B                   JSR         @R3
    00000984 E414                   MOV         #20,R4
    00000986 AC5B                   BRA         L557
    00000988 0009                   NOP
    0000098A              L633:                             
          Test.c   419                        
          Test.c   420                    }else if(strlen(MsgBuffer) > 25){
    0000098A D322                   MOV.L       L664+18,R3 ; _strlen
    0000098C 430B                   JSR         @R3
    0000098E 64C3                   MOV         R12,R4
    00000990 E219                   MOV         #25,R2
    00000992 3026                   CMP/HI      R2,R0
    00000994 8B04                   BF          L635
          Test.c   421                        DisplayErrorMessage(33);
    00000996 D121                   MOV.L       L664+26,R1 ; _DisplayErrorMessage
    00000998 410B                   JSR         @R1
    0000099A E421                   MOV         #33,R4
    0000099C AC50                   BRA         L557
    0000099E 0009                   NOP
    000009A0              L635:                             
          Test.c   422                        
          Test.c   423                    }else{
          Test.c   424                       
          Test.c   425    
          Test.c   426                        unsigned char *ReservedBuffer;
          Test.c   427                        short *recSize;
          Test.c   428                        int CountExcess = 0;
          Test.c   429                        Cursor_SetFlashOff();
    000009A0 D31F                   MOV.L       L664+30,R3 ; _Cursor_SetFlashOff
    000009A2 430B                   JSR         @R3
    000009A4 1FD5                   MOV.L       R13,@(20,R15)
          Test.c   430    
          Test.c   431                        //******************************* Create BT **********************************//




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Test.c   432    
          Test.c   433                        Serial_ClearTransmitBuffer();
    000009A6 D21F                   MOV.L       L664+34,R2 ; _Serial_ClearTransmitBuffer
    000009A8 420B                   JSR         @R2
    000009AA 0009                   NOP
          Test.c   434                        Serial_WriteBytes((unsigned char*)"&NewBT&", 8);     //send signal to the ESP32 to cre
                         +ate BT AP
    000009AC D41E                   MOV.L       L664+38,R4 ; L503
    000009AE 480B                   JSR         @R8
    000009B0 E508                   MOV         #8,R5
          Test.c   435                        Sleep(10);
          Test.c   436                        while(Serial_ReadBytes(ReservedBuffer, 1024, recSize) == 1){     //waiting for a respo
                         +nse
    000009B2 A007                   BRA         L647
    000009B4 E40A                   MOV         #10,R4
    000009B6              L638:                             
          Test.c   437                            CountExcess++;
          Test.c   438                            if(CountExcess >= 5){                               //TimeOut
    000009B6 E305                   MOV         #5,R3
    000009B8 52F5                   MOV.L       @(20,R15),R2
    000009BA 7201                   ADD         #1,R2
    000009BC 3233                   CMP/GE      R3,R2
    000009BE 8D0A                   BT/S        L640
    000009C0 1F25                   MOV.L       R2,@(20,R15)
          Test.c   439                                break;
          Test.c   440                            }
          Test.c   441                            Sleep(1000);
    000009C2 9421                   MOV.W       L664+6,R4  ; H'03E8
    000009C4              L647:                             
    000009C4 490B                   JSR         @R9
    000009C6 0009                   NOP
    000009C8 951F                   MOV.W       L664+8,R5  ; H'0400
    000009CA 66F3                   MOV         R15,R6
    000009CC D317                   MOV.L       L664+42,R3 ; _Serial_ReadBytes
    000009CE 430B                   JSR         @R3
    000009D0 64F3                   MOV         R15,R4
    000009D2 8801                   CMP/EQ      #1,R0
    000009D4 89EF                   BT          L638
    000009D6              L640:                             
          Test.c   442                        }
          Test.c   443                        Sleep(10);
    000009D6 490B                   JSR         @R9
    000009D8 E40A                   MOV         #10,R4
          Test.c   444                        Serial_ClearTransmitBuffer();
    000009DA D312                   MOV.L       L664+34,R3 ; _Serial_ClearTransmitBuffer
    000009DC 430B                   JSR         @R3
    000009DE 0009                   NOP
          Test.c   445                        Serial_WriteBytes(MsgBuffer, strlen(MsgBuffer));         //Send the name of BT AP to t
                         +he ESP32
    000009E0 D20C                   MOV.L       L664+18,R2 ; _strlen
    000009E2 420B                   JSR         @R2
    000009E4 64C3                   MOV         R12,R4
    000009E6 6503                   MOV         R0,R5
    000009E8 480B                   JSR         @R8
    000009EA 64C3                   MOV         R12,R4
          Test.c   446                        Sleep(10);
    000009EC 490B                   JSR         @R9




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009EE E40A                   MOV         #10,R4
          Test.c   447    
          Test.c   448                        //******************************************************************************//
          Test.c   449    
          Test.c   450                        locate(1,7);
    000009F0 E507                   MOV         #7,R5
    000009F2 4B0B                   JSR         @R11
    000009F4 E401                   MOV         #1,R4
          Test.c   451                        Print((unsigned char*)"Created !            ");
    000009F6 D40E                   MOV.L       L664+46,R4 ; L506
    000009F8 4A0B                   JSR         @R10
    000009FA 0009                   NOP
          Test.c   452                        MsgLength = 3;
    000009FC E303                   MOV         #3,R3
    000009FE AC1F                   BRA         L557
    00000A00 2E32                   MOV.L       R3,@R14
    00000A02              L664:                             
    00000A02 7549                   .DATA.W     H'7549
    00000A04 7534                   .DATA.W     H'7534
    00000A06 7539                   .DATA.W     H'7539
    00000A08 03E8                   .DATA.W     H'03E8
    00000A0A 0400                   .DATA.W     H'0400
    00000A0C <00000000>             .DATA.L     _IsTyping
    00000A10 <00000000>             .DATA.L     L458
    00000A14 <00000000>             .DATA.L     _strlen
    00000A18 <00000000>             .DATA.L     __slow_strcpy
    00000A1C <00000000>             .DATA.L     _DisplayErrorMessage
    00000A20 <00000000>             .DATA.L     _Cursor_SetFlashOff
    00000A24 <00000000>             .DATA.L     _Serial_ClearTransmitBuffer
    00000A28 <00000000>             .DATA.L     L503
    00000A2C <00000000>             .DATA.L     _Serial_ReadBytes
    00000A30 <00000000>             .DATA.L     L506
    00000A34              L560:                             
          Test.c   453                    }
          Test.c   454                }
          Test.c   455            }
          Test.c   456        }
          Test.c   457    
          Test.c   458    }
    00000A34 910C                   MOV.W       L667,R1    ; H'1028
    00000A36 3F1C                   ADD         R1,R15
    00000A38 4F16                   LDS.L       @R15+,MACL
    00000A3A 4F26                   LDS.L       @R15+,PR
    00000A3C 68F6                   MOV.L       @R15+,R8
    00000A3E 69F6                   MOV.L       @R15+,R9
    00000A40 6AF6                   MOV.L       @R15+,R10
    00000A42 6BF6                   MOV.L       @R15+,R11
    00000A44 6CF6                   MOV.L       @R15+,R12
    00000A46 6DF6                   MOV.L       @R15+,R13
    00000A48 000B                   RTS
    00000A4A 6EF6                   MOV.L       @R15+,R14
          Test.c   459    int AddIn_main(int isAppli, unsigned short OptionNum)
    00000A4C              _AddIn_main:                     ; function: AddIn_main
                                                           ; frame size=0
          Test.c   460    {
          Test.c   461        main();
    00000A4C ABDD                   BRA         _main




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A4E 0009                   NOP
    00000A50              L667:                             
    00000A50 1028                   .DATA.W     H'1028
          Test.c   462        
          Test.c   463    }
          Test.c   464    
          Test.c   465    //****************************************************************************
          Test.c   466    //**************                                              ****************
          Test.c   467    //**************                 Notice!                      ****************
          Test.c   468    //**************                                              ****************
          Test.c   469    //**************  Please do not change the following source.  ****************
          Test.c   470    //**************                                              ****************
          Test.c   471    //****************************************************************************
          Test.c   472    
          Test.c   473    
          Test.c   474    #pragma section _BR_Size
          Test.c   475    unsigned long BR_Size;
          Test.c   476    #pragma section
          Test.c   477    
          Test.c   478    
          Test.c   479    #pragma section _TOP
          Test.c   480    
          Test.c   481    //****************************************************************************
          Test.c   482    //  InitializeSystem
          Test.c   483    //
          Test.c   484    //  param   :   isAppli   : 1 = Application / 0 = eActivity
          Test.c   485    //              OptionNum : Option Number (only eActivity)
          Test.c   486    //
          Test.c   487    //  retval  :   1 = No error / 0 = Error
          Test.c   488    //
          Test.c   489    //****************************************************************************
          Test.c   490    int InitializeSystem(int isAppli, unsigned short OptionNum)
P_T 00000000              _InitializeSystem:               ; function: InitializeSystem
                                                           ; frame size=0
          Test.c   491    {
          Test.c   492        return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
    00000000 D301                   MOV.L       L668+2,R3  ; _INIT_ADDIN_APPLICATION
    00000002 432B                   JMP         @R3
    00000004 0009                   NOP
    00000006              L668:                             
    00000006 0000                   .DATA.W     0
    00000008 <00000000>             .DATA.L     _INIT_ADDIN_APPLICATION
          Test.c   493    }
          Test.c   494    
          Test.c   495    #pragma section
D   00000000              _window:                         ; static: window
    00000000 00000000               .DATA.L     H'00000000
    00000004              _IsExam:                         ; static: IsExam
    00000004 00000000               .DATA.L     H'00000000
    00000008              _i:                              ; static: i
    00000008 00000000               .DATA.L     H'00000000
    0000000C              _IsTyping:                       ; static: IsTyping
    0000000C 00000000               .DATA.L     H'00000000
    00000010              _IsSleeping:                     ; static: IsSleeping
    00000010 00000000               .DATA.L     H'00000000
    00000014              _MsgLength:                      ; static: MsgLength
    00000014 00000006               .DATA.L     H'00000006




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000018              _isLowercase:                    ; static: isLowercase
    00000018 00000000               .DATA.L     H'00000000
C   00000000              L390:
    00000000 46313A6372             .SDATA      "F1:create BT"
             6561746520   
             4254         
    0000000C 00                     .DATA.B     H'00
    0000000D 00000001               .RES.B      1
    0000000E 00000002               .RES.W      1
    00000010              L391:
    00000010 4E616D6520             .SDATA      "Name of the BT device"
             6F66207468   
             6520425420   
             6465766963   
             65           
    00000025 00                     .DATA.B     H'00
    00000026 00000002               .RES.W      1
    00000028              L392:
    00000028 2D3E                   .SDATA      "->"
    0000002A 00                     .DATA.B     H'00
    0000002B 00000001               .RES.B      1
    0000002C              L396:
    0000002C 4372656174             .SDATA      "Create new BT"
             65206E6577   
             204254       
    00000039 00                     .DATA.B     H'00
    0000003A 00000002               .RES.W      1
    0000003C              L397:
    0000003C 4E616D6520             .SDATA      "Name :"
             3A           
    00000042 00                     .DATA.B     H'00
    00000043 00000001               .RES.B      1
    00000044              L401:
    00000044 46313A6F70             .SDATA      "F1:open serial ESP32"
             656E207365   
             7269616C20   
             4553503332   
    00000058 00                     .DATA.B     H'00
    00000059 00000001               .RES.B      1
    0000005A 00000002               .RES.W      1
    0000005C              L402:
    0000005C 46323A6578             .SDATA      "F2:exam mode"
             616D206D6F   
             6465         
    00000068 00                     .DATA.B     H'00
    00000069 00000001               .RES.B      1
    0000006A 00000002               .RES.W      1
    0000006C              L403:
    0000006C 46333A706F             .SDATA      "F3:power off ESP32"
             776572206F   
             6666204553   
             503332       
    0000007E 00                     .DATA.B     H'00
    0000007F 00000001               .RES.B      1
    00000080              L404:
    00000080 46343A436F             .SDATA      "F4:Connect BT"
             6E6E656374   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             204254       
    0000008D 00                     .DATA.B     H'00
    0000008E 00000002               .RES.W      1
    00000090              L405:
    00000090 46353A5265             .SDATA      "F5:Restart ESP32"
             7374617274   
             2045535033   
             32           
    000000A0 00                     .DATA.B     H'00
    000000A1 00000001               .RES.B      1
    000000A2 00000002               .RES.W      1
    000000A4              L406:
    000000A4 4553503332             .SDATA      "ESP32 disconnected"
             2064697363   
             6F6E6E6563   
             746564       
    000000B6 00                     .DATA.B     H'00
    000000B7 00000001               .RES.B      1
    000000B8              L407:
    000000B8 4578616D20             .SDATA      "Exam mode off    "
             6D6F646520   
             6F66662020   
             2020         
    000000C9 00                     .DATA.B     H'00
    000000CA 00000002               .RES.W      1
    000000CC              L416:
    000000CC 7475726E20             .SDATA      "turn off ESP32 !"
             6F66662045   
             5350333220   
             21           
    000000DC 00                     .DATA.B     H'00
    000000DD              L420:
    000000DD 0005000000             .DATA.B     H'00,H'05,H'00,H'00,H'00,H'00
             00           
    000000E3 00000001               .RES.B      1
    000000E4              L423:
    000000E4 2652737426             .SDATA      "&Rst&"
    000000E9 00                     .DATA.B     H'00
    000000EA 00000002               .RES.W      1
    000000EC              L426:
    000000EC 4553503332             .SDATA      "ESP32 connected    "
             20636F6E6E   
             6563746564   
             20202020     
    000000FF 00                     .DATA.B     H'00
    00000100              L431:
    00000100 2645786D4F             .SDATA      "&ExmOn&"
             6E26         
    00000107 00                     .DATA.B     H'00
    00000108              L432:
    00000108 4578616D20             .SDATA      "Exam mode on     "
             6D6F646520   
             6F6E202020   
             2020         
    00000119 00                     .DATA.B     H'00
    0000011A 00000002               .RES.W      1
    0000011C              L434:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000011C 2645786D4F             .SDATA      "&ExmOff&"
             666626       
    00000124 00                     .DATA.B     H'00
    00000125 00000001               .RES.B      1
    00000126 00000002               .RES.W      1
    00000128              L437:
    00000128 46333A706F             .SDATA      "F3:power on ESP32  "
             776572206F   
             6E20455350   
             33322020     
    0000013B 00                     .DATA.B     H'00
    0000013C              L438:
    0000013C 26536C6565             .SDATA      "&Sleep&"
             7026         
    00000143 00                     .DATA.B     H'00
    00000144              L440:
    00000144 46333A706F             .SDATA      "F3:power off ESP32  "
             776572206F   
             6666204553   
             5033322020   
    00000158 00                     .DATA.B     H'00
    00000159 00000001               .RES.B      1
    0000015A 00000002               .RES.W      1
    0000015C              L441:
    0000015C 26536C6565             .SDATA      "&SleepEXIT&"
             7045584954   
             26           
    00000167 00                     .DATA.B     H'00
    00000168              L453:
    00000168 2563                   .SDATA      "%c"
    0000016A 00                     .DATA.B     H'00
    0000016B 00000001               .RES.B      1
    0000016C              L458:
    0000016C 20                     .SDATA      " "
    0000016D 00                     .DATA.B     H'00
    0000016E 00000002               .RES.W      1
    00000170              L468:
    00000170 26436F6E6E             .SDATA      "&ConnectBT&"
             6563744254   
             26           
    0000017B 00                     .DATA.B     H'00
    0000017C              L473:
    0000017C 26436F6E6E             .SDATA      "&Connect"
             656374       
    00000184 00                     .DATA.B     H'00
    00000185 00000001               .RES.B      1
    00000186 00000002               .RES.W      1
    00000188              L475:
    00000188 436F6E6E65             .SDATA      "Connected !            "
             6374656420   
             2120202020   
             2020202020   
             202020       
    0000019F 00                     .DATA.B     H'00
    000001A0              L476:
    000001A0 264661696C             .SDATA      "&Fail"
    000001A5 00                     .DATA.B     H'00




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001A6 00000002               .RES.W      1
    000001A8              L478:
    000001A8 4254206E6F             .SDATA      "BT not found           "
             7420666F75   
             6E64202020   
             2020202020   
             202020       
    000001BF 00                     .DATA.B     H'00
    000001C0              L480:
    000001C0 436F6D6D75             .SDATA      "Communication error    "
             6E69636174   
             696F6E2065   
             72726F7220   
             202020       
    000001D7 00                     .DATA.B     H'00
    000001D8              L503:
    000001D8 264E657742             .SDATA      "&NewBT&"
             5426         
    000001DF 00                     .DATA.B     H'00
    000001E0              L506:
    000001E0 4372656174             .SDATA      "Created !            "
             6564202120   
             2020202020   
             2020202020   
             20           
    000001F5 00                     .DATA.B     H'00
B   00000000              _n:                              ; static: n
    00000000 00000004               .RES.L      1
    00000004              _MsgBuffer:                      ; static: MsgBuffer
    00000004 00000400               .RES.B      1024
    00000404              _ReservedBufferBis:              ; static: ReservedBufferBis
    00000404 00000400               .RES.B      1024
B_B 00000000              _BR_Size:                        ; static: BR_Size
    00000000 00000004               .RES.L      1



























SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Jan-2023 22:08:33  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        36




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      495



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000A52 Byte(s)
PROGRAM  SECTION (P_BR_Size):                       00000000 Byte(s)
PROGRAM  SECTION (P_TOP):                           0000000C Byte(s)
CONSTANT SECTION (C):                               000001F6 Byte(s)
CONSTANT SECTION (C_BR_Size):                       00000000 Byte(s)
CONSTANT SECTION (C_TOP):                           00000000 Byte(s)
DATA     SECTION (D):                               0000001C Byte(s)
DATA     SECTION (D_BR_Size):                       00000000 Byte(s)
DATA     SECTION (D_TOP):                           00000000 Byte(s)
BSS      SECTION (B):                               00000804 Byte(s)
BSS      SECTION (B_BR_Size):                       00000004 Byte(s)
BSS      SECTION (B_TOP):                           00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00001478 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           26
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          17
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           152






















*** COMMAND PARAMETER ***


  -subcommand=C:\Users\rapha\AppData\Local\Temp\hmk6EB4.tmp 

