SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE    1

************ OBJECT LISTING ************

FILE NAME: D:\DOCUMENTS\Raphael\casio\code\SDK\projects\ConnectFX\Test.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Test.c     1    /*****************************************************************/
          Test.c     2    /*                                                               */
          Test.c     3    /*   CASIO fx-9860G SDK Library                                  */
          Test.c     4    /*                                                               */
          Test.c     5    /*   File name : Test.c                                          */
          Test.c     6    /*                                                               */
          Test.c     7    /*   Copyright (c) 2006 CASIO COMPUTER CO., LTD.                 */
          Test.c     8    /*                                                               */
          Test.c     9    /*****************************************************************/
          Test.c    10    #include "D:\CASIO\casio\OS\FX\include\fxlib.h"
          Test.c    11    #include <stdio.h>
          Test.c    12    #include <string.h>
          Test.c    13    #include "D:\DOCUMENTS\Raphael\casio\code\SDK\projects\ConnectFX\syscall.h"
          Test.c    14    
          Test.c    15    //****************************************************************************
          Test.c    16    //  AddIn_main (Sample program main function)
          Test.c    17    //
          Test.c    18    //  param   :   isAppli   : 1 = This application is launched by MAIN MENU.
          Test.c    19    //                        : 0 = This application is launched by a strip in eACT application.
          Test.c    20    //
          Test.c    21    //              OptionNum : Strip number (0~3)
          Test.c    22    //                         (This parameter is only used when isAppli parameter is 0.)
          Test.c    23    //
          Test.c    24    //  retval  :   1 = No error / 0 = Error
          Test.c    25    //
          Test.c    26    //****************************************************************************
          Test.c    27    
          Test.c    28    int window = 0;             //current window displayed
          Test.c    29    int IsExam = 0;             //Is led blinking
          Test.c    30    int n;                      //selected BT device
          Test.c    31    int i = 0;                  //numer of devices
          Test.c    32    int IsTyping = 0;           //Is in typing mode
          Test.c    33    int IsSleeping = 0;         //Is the ESP32 in deep sleep
          Test.c    34    int MsgLength = 6;          //Cusror place for text input
          Test.c    35    char MsgBuffer[1024];       //Msg enter in text input 
          Test.c    36    int isLowercase = 0;
          Test.c    37    char ReservedBufferBis[1024];
          Test.c    38    
          Test.c    39    
          Test.c    40    void OpenBTList(){                          //Create the window to connect to a BT device
P   00000000              _OpenBTList:                     ; function: OpenBTList
                                                           ; frame size=12
    00000000 2FE6                   MOV.L       R14,@-R15
          Test.c    41    
          Test.c    42        IsTyping = 1;
    00000002 E301                   MOV         #1,R3
    00000004 D245                   MOV.L       L635+4,R2  ; _IsTyping
    00000006 2FD6                   MOV.L       R13,@-R15
    00000008 4F22                   STS.L       PR,@-R15
    0000000A 2232                   MOV.L       R3,@R2
          Test.c    43        memset(MsgBuffer, 0, 1024);
    0000000C 9684                   MOV.W       L635,R6    ; H'0400
    0000000E D444                   MOV.L       L635+8,R4  ; _MsgBuffer
    00000010 D344                   MOV.L       L635+12,R3 ; _memset




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000012 430B                   JSR         @R3
    00000014 E500                   MOV         #0,R5
          Test.c    44        Bdisp_AllClr_VRAM();                    //Clear the Vram
    00000016 D244                   MOV.L       L635+16,R2 ; _Bdisp_AllClr_VRAM
    00000018 420B                   JSR         @R2
    0000001A 0009                   NOP
          Test.c    45        
          Test.c    46        locate(1,1);                                     //Put text to screen
    0000001C DE43                   MOV.L       L635+20,R14; _locate
    0000001E E501                   MOV         #1,R5
    00000020 4E0B                   JSR         @R14
    00000022 6453                   MOV         R5,R4
          Test.c    47        Print((unsigned char*)"F1:create BT");
    00000024 DD42                   MOV.L       L635+24,R13; _Print
    00000026 D443                   MOV.L       L635+28,R4 ; L383
    00000028 4D0B                   JSR         @R13
    0000002A 0009                   NOP
          Test.c    48        locate(1,2);
    0000002C E502                   MOV         #2,R5
    0000002E 4E0B                   JSR         @R14
    00000030 E401                   MOV         #1,R4
          Test.c    49        Print((unsigned char*)"Name of the BT device");
    00000032 D441                   MOV.L       L635+32,R4 ; L384
    00000034 4D0B                   JSR         @R13
    00000036 0009                   NOP
          Test.c    50        locate(1,4);
    00000038 E504                   MOV         #4,R5
    0000003A 4E0B                   JSR         @R14
    0000003C E401                   MOV         #1,R4
          Test.c    51        Print((unsigned char*)"->");
    0000003E D43F                   MOV.L       L635+36,R4 ; L385
    00000040 4D0B                   JSR         @R13
    00000042 0009                   NOP
          Test.c    52        MsgLength = 3;
    00000044 D23E                   MOV.L       L635+40,R2 ; _MsgLength
    00000046 E303                   MOV         #3,R3
    00000048 2232                   MOV.L       R3,@R2
          Test.c    53    
          Test.c    54        return;
          Test.c    55    }
    0000004A 4F26                   LDS.L       @R15+,PR
    0000004C 6DF6                   MOV.L       @R15+,R13
    0000004E 000B                   RTS
    00000050 6EF6                   MOV.L       @R15+,R14
          Test.c    56    
          Test.c    57    void CreateBTMenu(){                                //Create the window to create a BT AP
    00000052              _CreateBTMenu:                   ; function: CreateBTMenu
                                                           ; frame size=12
          Test.c    58    
          Test.c    59        MsgLength = 3;
    00000052 E103                   MOV         #3,R1
    00000054 D03A                   MOV.L       L635+40,R0 ; _MsgLength
    00000056 2FE6                   MOV.L       R14,@-R15
    00000058 2FD6                   MOV.L       R13,@-R15
    0000005A 4F22                   STS.L       PR,@-R15
    0000005C 2012                   MOV.L       R1,@R0
          Test.c    60        memset(MsgBuffer, 0, 1024);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000005E 965B                   MOV.W       L635,R6    ; H'0400
    00000060 D42F                   MOV.L       L635+8,R4  ; _MsgBuffer
    00000062 D330                   MOV.L       L635+12,R3 ; _memset
    00000064 430B                   JSR         @R3
    00000066 E500                   MOV         #0,R5
          Test.c    61        Bdisp_AllClr_VRAM();                            //clear VRAM
    00000068 D22F                   MOV.L       L635+16,R2 ; _Bdisp_AllClr_VRAM
    0000006A 420B                   JSR         @R2
    0000006C 0009                   NOP
          Test.c    62        locate(1,1);
    0000006E E501                   MOV         #1,R5
    00000070 DE2E                   MOV.L       L635+20,R14; _locate
    00000072 4E0B                   JSR         @R14
    00000074 6453                   MOV         R5,R4
          Test.c    63        Print((unsigned char*)"Create new BT");       
    00000076 DD2E                   MOV.L       L635+24,R13; _Print
    00000078 D432                   MOV.L       L635+44,R4 ; L388
    0000007A 4D0B                   JSR         @R13
    0000007C 0009                   NOP
          Test.c    64        locate(1,2);
    0000007E E502                   MOV         #2,R5
    00000080 4E0B                   JSR         @R14
    00000082 E401                   MOV         #1,R4
          Test.c    65        Print((unsigned char*)"Name :");      
    00000084 D430                   MOV.L       L635+48,R4 ; L389
    00000086 4D0B                   JSR         @R13
    00000088 0009                   NOP
          Test.c    66        locate(1,4);
    0000008A E504                   MOV         #4,R5
    0000008C 4E0B                   JSR         @R14
    0000008E E401                   MOV         #1,R4
          Test.c    67        Print((unsigned char*)"->");                  
    00000090 D42A                   MOV.L       L635+36,R4 ; L385
    00000092 4D0B                   JSR         @R13
    00000094 0009                   NOP
          Test.c    68        //Cursor_SetFlashOn("|");
          Test.c    69        IsTyping = 1;
    00000096 E301                   MOV         #1,R3
    00000098 D220                   MOV.L       L635+4,R2  ; _IsTyping
    0000009A 2232                   MOV.L       R3,@R2
          Test.c    70        return;
          Test.c    71    }
    0000009C 4F26                   LDS.L       @R15+,PR
    0000009E 6DF6                   MOV.L       @R15+,R13
    000000A0 000B                   RTS
    000000A2 6EF6                   MOV.L       @R15+,R14
          Test.c    72    
          Test.c    73    void MainMenu(){
    000000A4              _MainMenu:                       ; function: MainMenu
                                                           ; frame size=12
    000000A4 2FE6                   MOV.L       R14,@-R15
    000000A6 2FD6                   MOV.L       R13,@-R15
    000000A8 4F22                   STS.L       PR,@-R15
          Test.c    74        
          Test.c    75        Bdisp_AllClr_VRAM();
    000000AA D11F                   MOV.L       L635+16,R1 ; _Bdisp_AllClr_VRAM
    000000AC 410B                   JSR         @R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000AE 0009                   NOP
          Test.c    76    
          Test.c    77        locate(1,1);
    000000B0 DE1E                   MOV.L       L635+20,R14; _locate
    000000B2 E501                   MOV         #1,R5
    000000B4 4E0B                   JSR         @R14
    000000B6 6453                   MOV         R5,R4
          Test.c    78        Print((unsigned char*)"F1:open serial ESP32");
    000000B8 DD1D                   MOV.L       L635+24,R13; _Print
    000000BA D424                   MOV.L       L635+52,R4 ; L392
    000000BC 4D0B                   JSR         @R13
    000000BE 0009                   NOP
          Test.c    79        locate(1,2);
    000000C0 E502                   MOV         #2,R5
    000000C2 4E0B                   JSR         @R14
    000000C4 E401                   MOV         #1,R4
          Test.c    80        Print((unsigned char*)"F2:exam mode");
    000000C6 D422                   MOV.L       L635+56,R4 ; L393
    000000C8 4D0B                   JSR         @R13
    000000CA 0009                   NOP
          Test.c    81        locate(1,3);
    000000CC E503                   MOV         #3,R5
    000000CE 4E0B                   JSR         @R14
    000000D0 E401                   MOV         #1,R4
          Test.c    82        Print((unsigned char*)"F3:power off ESP32");
    000000D2 D420                   MOV.L       L635+60,R4 ; L394
    000000D4 4D0B                   JSR         @R13
    000000D6 0009                   NOP
          Test.c    83        locate(1,4);
    000000D8 E504                   MOV         #4,R5
    000000DA 4E0B                   JSR         @R14
    000000DC E401                   MOV         #1,R4
          Test.c    84        Print((unsigned char*)"F4:Connect BT");
    000000DE D41E                   MOV.L       L635+64,R4 ; L395
    000000E0 4D0B                   JSR         @R13
    000000E2 0009                   NOP
          Test.c    85        locate(1,5);
    000000E4 E505                   MOV         #5,R5
    000000E6 4E0B                   JSR         @R14
    000000E8 E401                   MOV         #1,R4
          Test.c    86        Print((unsigned char*)"F5:Restart ESP32");
    000000EA D41C                   MOV.L       L635+68,R4 ; L396
    000000EC 4D0B                   JSR         @R13
    000000EE 0009                   NOP
          Test.c    87        locate(1,7);
    000000F0 E507                   MOV         #7,R5
    000000F2 4E0B                   JSR         @R14
    000000F4 E401                   MOV         #1,R4
          Test.c    88        Print((unsigned char*)"ESP32 disconnected");
    000000F6 D41A                   MOV.L       L635+72,R4 ; L397
    000000F8 4D0B                   JSR         @R13
    000000FA 0009                   NOP
          Test.c    89        locate(1,8);
    000000FC E508                   MOV         #8,R5
    000000FE 4E0B                   JSR         @R14
    00000100 E401                   MOV         #1,R4
          Test.c    90        Print((unsigned char*)"Exam mode off    ");




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000102 D418                   MOV.L       L635+76,R4 ; L398
    00000104 4D0B                   JSR         @R13
    00000106 0009                   NOP
          Test.c    91        Keyboard_PutKeycode(-1, -1, 0x30);
    00000108 4F26                   LDS.L       @R15+,PR
    0000010A E630                   MOV         #48,R6
    0000010C D316                   MOV.L       L635+80,R3 ; _Keyboard_PutKeycode
    0000010E E5FF                   MOV         #-1,R5
    00000110 6DF6                   MOV.L       @R15+,R13
    00000112 6453                   MOV         R5,R4
    00000114 432B                   JMP         @R3
    00000116 6EF6                   MOV.L       @R15+,R14
    00000118              L635:                             
    00000118 0400                   .DATA.W     H'0400
    0000011A 0000                   .DATA.W     0
    0000011C <00000000>             .DATA.L     _IsTyping
    00000120 <00000000>             .DATA.L     _MsgBuffer
    00000124 <00000000>             .DATA.L     _memset
    00000128 <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    0000012C <00000000>             .DATA.L     _locate
    00000130 <00000000>             .DATA.L     _Print
    00000134 <00000000>             .DATA.L     L383
    00000138 <00000000>             .DATA.L     L384
    0000013C <00000000>             .DATA.L     L385
    00000140 <00000000>             .DATA.L     _MsgLength
    00000144 <00000000>             .DATA.L     L388
    00000148 <00000000>             .DATA.L     L389
    0000014C <00000000>             .DATA.L     L392
    00000150 <00000000>             .DATA.L     L393
    00000154 <00000000>             .DATA.L     L394
    00000158 <00000000>             .DATA.L     L395
    0000015C <00000000>             .DATA.L     L396
    00000160 <00000000>             .DATA.L     L397
    00000164 <00000000>             .DATA.L     L398
    00000168 <00000000>             .DATA.L     _Keyboard_PutKeycode
          Test.c    92        return;
          Test.c    93    
          Test.c    94    }
          Test.c    95    
          Test.c    96    void main() {
    0000016C              _main:                           ; function: main
                                                           ; frame size=4164
                                                           ; used runtime library name:
                                                           ; __slow_mvn, __slow_strcpy, __slow_strcmp1
    0000016C 2FE6                   MOV.L       R14,@-R15
    0000016E 2FD6                   MOV.L       R13,@-R15
    00000170 2FC6                   MOV.L       R12,@-R15
    00000172 2FB6                   MOV.L       R11,@-R15
    00000174 2FA6                   MOV.L       R10,@-R15
    00000176 2F96                   MOV.L       R9,@-R15
    00000178 2F86                   MOV.L       R8,@-R15
    0000017A 4F22                   STS.L       PR,@-R15
    0000017C 4F12                   STS.L       MACL,@-R15
    0000017E 9050                   MOV.W       L636,R0    ; H'EFE8
    00000180 D82B                   MOV.L       L636+14,R8 ; _isLowercase
    00000182 3F0C                   ADD         R0,R15
    00000184 D92B                   MOV.L       L636+18,R9 ; _Sleep




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000186 DA2C                   MOV.L       L636+22,R10; _Print
    00000188 DB2C                   MOV.L       L636+26,R11; _locate
    0000018A DC2D                   MOV.L       L636+30,R12; _MsgBuffer
    0000018C DE2D                   MOV.L       L636+34,R14; _MsgLength
          Test.c    97    
          Test.c    98        
          Test.c    99        unsigned int key;
          Test.c   100        int isPressed = 0;
          Test.c   101        MainMenu();
    0000018E BF89                   BSR         _MainMenu
    00000190 ED00                   MOV         #0,R13
    00000192 9247                   MOV.W       L636+2,R2  ; H'100C
    00000194 D32C                   MOV.L       L636+38,R3 ; _ReservedBufferBis
    00000196 32FC                   ADD         R15,R2
    00000198 1F24                   MOV.L       R2,@(16,R15)
    0000019A 1F33                   MOV.L       R3,@(12,R15)
    0000019C 9242                   MOV.W       L636+2,R2  ; H'100C
    0000019E 32FC                   ADD         R15,R2
    000001A0 1F25                   MOV.L       R2,@(20,R15)
          Test.c   102       
          Test.c   103        while(1){
    000001A2              L544:                             
          Test.c   104    
          Test.c   105            isPressed = 0;
    000001A2 1FD2                   MOV.L       R13,@(8,R15)
          Test.c   106            GetKey(&key);
    000001A4 D329                   MOV.L       L636+42,R3 ; _GetKey
    000001A6 430B                   JSR         @R3
    000001A8 64F3                   MOV         R15,R4
          Test.c   107    
          Test.c   108            if(window == 0){
    000001AA D329                   MOV.L       L636+46,R3 ; _window
    000001AC 6232                   MOV.L       @R3,R2
    000001AE 2228                   TST         R2,R2
    000001B0 8901                   BT          L637
    000001B2 A118                   BRA         L545
    000001B4 0009                   NOP
    000001B6              L637:                             
          Test.c   109                if (key == KEY_CTRL_EXIT) {     //Stop the program if the key is EXIT
    000001B6 9436                   MOV.W       L636+4,R4  ; H'7532
    000001B8 62F2                   MOV.L       @R15,R2
    000001BA 3240                   CMP/EQ      R4,R2
    000001BC 8B01                   BF          L638
    000001BE A341                   BRA         L547
    000001C0 0009                   NOP
    000001C2              L638:                             
          Test.c   110                    break;
          Test.c   111                }
          Test.c   112    
          Test.c   113                if (key == KEY_CTRL_F1) {       //Start serial comunication with the ESP32 at 9600 bps if F1 i
                         +s pressed
    000001C2 9331                   MOV.W       L636+6,R3  ; H'7539
    000001C4 61F2                   MOV.L       @R15,R1
    000001C6 3130                   CMP/EQ      R3,R1
    000001C8 8B13                   BF          L548
          Test.c   114                    if (Serial_IsOpen() != 1) {
    000001CA D222                   MOV.L       L636+50,R2 ; _Serial_IsOpen




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001CC 420B                   JSR         @R2
    000001CE 0009                   NOP
    000001D0 8801                   CMP/EQ      #1,R0
    000001D2 890B                   BT          L549
          Test.c   115                        unsigned char mode[6] = {0, 5, 0, 0, 0, 0};    // 9600 bps 8n1
    000001D4 9129                   MOV.W       L636+8,R1  ; H'1010
    000001D6 31FC                   ADD         R15,R1
    000001D8 D21F                   MOV.L       L636+54,R2 ; L409
    000001DA D320                   MOV.L       L636+58,R3 ; __slow_mvn
    000001DC 430B                   JSR         @R3
    000001DE E006                   MOV         #6,R0
          Test.c   116                        Serial_Open(mode);
    000001E0 9423                   MOV.W       L636+8,R4  ; H'1010
    000001E2 D11F                   MOV.L       L636+62,R1 ; _Serial_Open
    000001E4 410B                   JSR         @R1
    000001E6 34FC                   ADD         R15,R4
    000001E8 A003                   BRA         L548
    000001EA 0009                   NOP
    000001EC              L549:                             
          Test.c   117                    }else {
          Test.c   118                        Serial_Close(1);
    000001EC D21D                   MOV.L       L636+66,R2 ; _Serial_Close
    000001EE 420B                   JSR         @R2
    000001F0 E401                   MOV         #1,R4
    000001F2              L548:                             
          Test.c   119                    }
          Test.c   120                }
          Test.c   121    
          Test.c   122                if (key == KEY_CTRL_F5) {       
    000001F2 941B                   MOV.W       L636+10,R4 ; H'753D
    000001F4 63F2                   MOV.L       @R15,R3
    000001F6 3340                   CMP/EQ      R4,R3
    000001F8 8B08                   BF          L551
          Test.c   123                    Serial_ClearTransmitBuffer();
    000001FA D11B                   MOV.L       L636+70,R1 ; _Serial_ClearTransmitBuffer
    000001FC 410B                   JSR         @R1
    000001FE 0009                   NOP
          Test.c   124                    Serial_WriteBytes("&Rst&", 6);
    00000200 D41A                   MOV.L       L636+74,R4 ; L412
    00000202 D31B                   MOV.L       L636+78,R3 ; _Serial_WriteBytes
    00000204 430B                   JSR         @R3
    00000206 E506                   MOV         #6,R5
          Test.c   125                    Sleep(10);
    00000208 490B                   JSR         @R9
    0000020A E40A                   MOV         #10,R4
    0000020C              L551:                             
          Test.c   126                }
          Test.c   127    
          Test.c   128                if(Serial_IsOpen() == 1){       //check if the serial is open
    0000020C D211                   MOV.L       L636+50,R2 ; _Serial_IsOpen
    0000020E 420B                   JSR         @R2
    00000210 0009                   NOP
    00000212 8801                   CMP/EQ      #1,R0
    00000214 8B30                   BF          L552
          Test.c   129                    int iresult;
          Test.c   130                    //GetFKeyPtr(0x0522, &iresult);
          Test.c   131                    //FKey_Display(0, iresult);       //F1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Test.c   132                    locate(1,7);
    00000216 E507                   MOV         #7,R5
    00000218 4B0B                   JSR         @R11
    0000021A E401                   MOV         #1,R4
          Test.c   133                    Print((unsigned char*)"ESP32 connected    ");
    0000021C D415                   MOV.L       L636+82,R4 ; L415
    0000021E A02F                   BRA         L629
    00000220 0009                   NOP
    00000222              L636:                             
    00000222 EFE8                   .DATA.W     H'EFE8
    00000224 100C                   .DATA.W     H'100C
    00000226 7532                   .DATA.W     H'7532
    00000228 7539                   .DATA.W     H'7539
    0000022A 1010                   .DATA.W     H'1010
    0000022C 753D                   .DATA.W     H'753D
    0000022E 0000                   .DATA.W     0
    00000230 <00000000>             .DATA.L     _isLowercase
    00000234 <00000000>             .DATA.L     _Sleep
    00000238 <00000000>             .DATA.L     _Print
    0000023C <00000000>             .DATA.L     _locate
    00000240 <00000000>             .DATA.L     _MsgBuffer
    00000244 <00000000>             .DATA.L     _MsgLength
    00000248 <00000000>             .DATA.L     _ReservedBufferBis
    0000024C <00000000>             .DATA.L     _GetKey
    00000250 <00000000>             .DATA.L     _window
    00000254 <00000000>             .DATA.L     _Serial_IsOpen
    00000258 <00000000>             .DATA.L     L409
    0000025C <00000000>             .DATA.L     __slow_mvn
    00000260 <00000000>             .DATA.L     _Serial_Open
    00000264 <00000000>             .DATA.L     _Serial_Close
    00000268 <00000000>             .DATA.L     _Serial_ClearTransmitBuffer
    0000026C <00000000>             .DATA.L     L412
    00000270 <00000000>             .DATA.L     _Serial_WriteBytes
    00000274 <00000000>             .DATA.L     L415
    00000278              L552:                             
          Test.c   134                }else{                          //This execute if the serial is closed
          Test.c   135                    int iresult;
          Test.c   136                    //GetFKeyPtr(0x0165, &iresult);
          Test.c   137                    //FKey_Display(0, iresult);       //F1
          Test.c   138                    locate(1,7);
    00000278 E507                   MOV         #7,R5
    0000027A 4B0B                   JSR         @R11
    0000027C E401                   MOV         #1,R4
          Test.c   139                    Print((unsigned char*)"ESP32 disconnected");
    0000027E D43A                   MOV.L       L639+8,R4  ; L397
    00000280              L629:                             
    00000280 4A0B                   JSR         @R10
    00000282 0009                   NOP
          Test.c   140                }
          Test.c   141    
          Test.c   142                if(key == KEY_CTRL_F2){         //Send signal to ESP32 to blink the exam led if F2 is pressed
    00000284 936C                   MOV.W       L639,R3    ; H'753A
    00000286 62F2                   MOV.L       @R15,R2
    00000288 3230                   CMP/EQ      R3,R2
    0000028A 8B2A                   BF          L554
    0000028C D237                   MOV.L       L639+12,R2 ; _IsExam
    0000028E 6422                   MOV.L       @R2,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000290 2448                   TST         R4,R4
    00000292 8B12                   BF          L555
          Test.c   143                    if(IsExam == 0){
          Test.c   144                        Serial_ClearTransmitBuffer();
    00000294 D136                   MOV.L       L639+16,R1 ; _Serial_ClearTransmitBuffer
    00000296 410B                   JSR         @R1
    00000298 0009                   NOP
          Test.c   145                        Serial_WriteBytes("&ExmOn&", 8);
    0000029A D436                   MOV.L       L639+20,R4 ; L420
    0000029C D336                   MOV.L       L639+24,R3 ; _Serial_WriteBytes
    0000029E 430B                   JSR         @R3
    000002A0 E508                   MOV         #8,R5
          Test.c   146                        Sleep(10);
    000002A2 490B                   JSR         @R9
    000002A4 E40A                   MOV         #10,R4
          Test.c   147                        locate(1,8);
    000002A6 E508                   MOV         #8,R5
    000002A8 4B0B                   JSR         @R11
    000002AA E401                   MOV         #1,R4
          Test.c   148                        Print((unsigned char*)"Exam mode on     ");
    000002AC D433                   MOV.L       L639+28,R4 ; L421
    000002AE 4A0B                   JSR         @R10
    000002B0 0009                   NOP
          Test.c   149                        IsExam = 1;
    000002B2 E201                   MOV         #1,R2
    000002B4 D32D                   MOV.L       L639+12,R3 ; _IsExam
    000002B6 A014                   BRA         L554
    000002B8 2322                   MOV.L       R2,@R3
    000002BA              L555:                             
          Test.c   150                    }
          Test.c   151                    else if(IsExam == 1){       //Send signal to ESP32 to stop blinking the exam led
    000002BA 6043                   MOV         R4,R0
    000002BC 8801                   CMP/EQ      #1,R0
    000002BE 8B10                   BF          L554
          Test.c   152                        Serial_ClearTransmitBuffer();
    000002C0 D12B                   MOV.L       L639+16,R1 ; _Serial_ClearTransmitBuffer
    000002C2 410B                   JSR         @R1
    000002C4 0009                   NOP
          Test.c   153                        Serial_WriteBytes("&ExmOff&", 9);
    000002C6 D42E                   MOV.L       L639+32,R4 ; L423
    000002C8 D32B                   MOV.L       L639+24,R3 ; _Serial_WriteBytes
    000002CA 430B                   JSR         @R3
    000002CC E509                   MOV         #9,R5
          Test.c   154                        Sleep(10);
    000002CE 490B                   JSR         @R9
    000002D0 E40A                   MOV         #10,R4
          Test.c   155                        locate(1,8);
    000002D2 E508                   MOV         #8,R5
    000002D4 4B0B                   JSR         @R11
    000002D6 E401                   MOV         #1,R4
          Test.c   156                        Print((unsigned char*)"Exam mode off    ");
    000002D8 D42A                   MOV.L       L639+36,R4 ; L398
    000002DA 4A0B                   JSR         @R10
    000002DC 0009                   NOP
          Test.c   157                        IsExam = 0;
    000002DE D223                   MOV.L       L639+12,R2 ; _IsExam
    000002E0 22D2                   MOV.L       R13,@R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002E2              L554:                             
          Test.c   158                    }
          Test.c   159                }
          Test.c   160    
          Test.c   161                if(key == KEY_CTRL_F3){         //Open test mode if F3 is pressed
    000002E2 943E                   MOV.W       L639+2,R4  ; H'753B
    000002E4 63F2                   MOV.L       @R15,R3
    000002E6 3340                   CMP/EQ      R4,R3
    000002E8 8B2A                   BF          L558
          Test.c   162                    
          Test.c   163                    if(IsSleeping == 0){
    000002EA D227                   MOV.L       L639+40,R2 ; _IsSleeping
    000002EC 6122                   MOV.L       @R2,R1
    000002EE 2118                   TST         R1,R1
    000002F0 8B12                   BF          L559
          Test.c   164                        
          Test.c   165                        locate(1,3);
    000002F2 E503                   MOV         #3,R5
    000002F4 4B0B                   JSR         @R11
    000002F6 E401                   MOV         #1,R4
          Test.c   166                        Print((unsigned char*)"F3:power on ESP32  ");
    000002F8 D424                   MOV.L       L639+44,R4 ; L426
    000002FA 4A0B                   JSR         @R10
    000002FC 0009                   NOP
          Test.c   167                        IsExam = 0; 
          Test.c   168                        IsSleeping=1;
    000002FE E201                   MOV         #1,R2
    00000300 D121                   MOV.L       L639+40,R1 ; _IsSleeping
    00000302 D31A                   MOV.L       L639+12,R3 ; _IsExam
          Test.c   169                        Serial_WriteBytes("&Sleep&", 8);
    00000304 D422                   MOV.L       L639+48,R4 ; L427
    00000306 23D2                   MOV.L       R13,@R3
    00000308 2122                   MOV.L       R2,@R1
    0000030A D21B                   MOV.L       L639+24,R2 ; _Serial_WriteBytes
    0000030C 420B                   JSR         @R2
    0000030E E508                   MOV         #8,R5
          Test.c   170                        Sleep(10);
    00000310 490B                   JSR         @R9
    00000312 E40A                   MOV         #10,R4
    00000314 A014                   BRA         L558
    00000316 0009                   NOP
    00000318              L559:                             
          Test.c   171    
          Test.c   172                    }else if(IsSleeping == 1){
    00000318 6022                   MOV.L       @R2,R0
    0000031A 8801                   CMP/EQ      #1,R0
    0000031C 8B10                   BF          L558
          Test.c   173                        locate(1,3);
    0000031E E503                   MOV         #3,R5
    00000320 4B0B                   JSR         @R11
    00000322 E401                   MOV         #1,R4
          Test.c   174                        Print((unsigned char*)"F3:power off ESP32  ");
    00000324 D41B                   MOV.L       L639+52,R4 ; L429
    00000326 4A0B                   JSR         @R10
    00000328 0009                   NOP
          Test.c   175                        IsSleeping=0;
    0000032A D317                   MOV.L       L639+40,R3 ; _IsSleeping




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Test.c   176                        Serial_ClearTransmitBuffer();
    0000032C D210                   MOV.L       L639+16,R2 ; _Serial_ClearTransmitBuffer
    0000032E 420B                   JSR         @R2
    00000330 23D2                   MOV.L       R13,@R3
          Test.c   177                        Serial_WriteBytes("&SleepEXIT&", 12);
    00000332 D419                   MOV.L       L639+56,R4 ; L430
    00000334 D310                   MOV.L       L639+24,R3 ; _Serial_WriteBytes
    00000336 430B                   JSR         @R3
    00000338 E50C                   MOV         #12,R5
          Test.c   178                        Sleep(1000);
    0000033A 9413                   MOV.W       L639+4,R4  ; H'03E8
    0000033C 490B                   JSR         @R9
    0000033E 0009                   NOP
    00000340              L558:                             
    00000340 D211                   MOV.L       L639+40,R2 ; _IsSleeping
    00000342 6422                   MOV.L       @R2,R4
    00000344 2448                   TST         R4,R4
    00000346 8B29                   BF          L562
    00000348 910B                   MOV.W       L639+2,R1  ; H'753B
    0000034A 63F2                   MOV.L       @R15,R3
    0000034C 3310                   CMP/EQ      R1,R3
    0000034E 8925                   BT          L562
          Test.c   179                    }
          Test.c   180                }
          Test.c   181    
          Test.c   182                if(IsSleeping == 0 && key != KEY_CTRL_F3){
          Test.c   183                    locate(1,3);
    00000350 E503                   MOV         #3,R5
    00000352 4B0B                   JSR         @R11
    00000354 E401                   MOV         #1,R4
          Test.c   184                    Print((unsigned char*)"F3:power off ESP32  ");
    00000356 D40F                   MOV.L       L639+52,R4 ; L429
    00000358 4A0B                   JSR         @R10
    0000035A 0009                   NOP
    0000035C A03A                   BRA         L563
    0000035E 0009                   NOP
    00000360              L639:                             
    00000360 753A                   .DATA.W     H'753A
    00000362 753B                   .DATA.W     H'753B
    00000364 03E8                   .DATA.W     H'03E8
    00000366 0000                   .DATA.W     0
    00000368 <00000000>             .DATA.L     L397
    0000036C <00000000>             .DATA.L     _IsExam
    00000370 <00000000>             .DATA.L     _Serial_ClearTransmitBuffer
    00000374 <00000000>             .DATA.L     L420
    00000378 <00000000>             .DATA.L     _Serial_WriteBytes
    0000037C <00000000>             .DATA.L     L421
    00000380 <00000000>             .DATA.L     L423
    00000384 <00000000>             .DATA.L     L398
    00000388 <00000000>             .DATA.L     _IsSleeping
    0000038C <00000000>             .DATA.L     L426
    00000390 <00000000>             .DATA.L     L427
    00000394 <00000000>             .DATA.L     L429
    00000398 <00000000>             .DATA.L     L430
    0000039C              L562:                             
          Test.c   185                }else if(IsSleeping == 1 && ( key == KEY_CTRL_F2 || key == KEY_CTRL_F1)){
    0000039C 6043                   MOV         R4,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000039E 8801                   CMP/EQ      #1,R0
    000003A0 8B18                   BF          L563
    000003A2 925D                   MOV.W       L640,R2    ; H'753A
    000003A4 63F2                   MOV.L       @R15,R3
    000003A6 3320                   CMP/EQ      R2,R3
    000003A8 8903                   BT          L565
    000003AA 935A                   MOV.W       L640+2,R3  ; H'7539
    000003AC 61F2                   MOV.L       @R15,R1
    000003AE 3130                   CMP/EQ      R3,R1
    000003B0 8B10                   BF          L563
    000003B2              L565:                             
          Test.c   186                    locate(1,3);
    000003B2 E503                   MOV         #3,R5
    000003B4 4B0B                   JSR         @R11
    000003B6 E401                   MOV         #1,R4
          Test.c   187                    Print((unsigned char*)"F3:power off ESP32  ");
    000003B8 D42B                   MOV.L       L640+8,R4  ; L429
    000003BA 4A0B                   JSR         @R10
    000003BC 0009                   NOP
          Test.c   188                    IsSleeping=0;
    000003BE D32B                   MOV.L       L640+12,R3 ; _IsSleeping
          Test.c   189                    Serial_ClearTransmitBuffer();
    000003C0 D22B                   MOV.L       L640+16,R2 ; _Serial_ClearTransmitBuffer
    000003C2 420B                   JSR         @R2
    000003C4 23D2                   MOV.L       R13,@R3
          Test.c   190                    Serial_WriteBytes("&SleepEXIT&", 12);
    000003C6 D42B                   MOV.L       L640+20,R4 ; L430
    000003C8 D32B                   MOV.L       L640+24,R3 ; _Serial_WriteBytes
    000003CA 430B                   JSR         @R3
    000003CC E50C                   MOV         #12,R5
          Test.c   191                    Sleep(1000);
    000003CE 9449                   MOV.W       L640+4,R4  ; H'03E8
    000003D0 490B                   JSR         @R9
    000003D2 0009                   NOP
    000003D4              L563:                             
          Test.c   192                }
          Test.c   193    
          Test.c   194                if(key == KEY_CTRL_F4){         //Open BT list if F4 is pressed
    000003D4 9447                   MOV.W       L640+6,R4  ; H'753C
    000003D6 62F2                   MOV.L       @R15,R2
    000003D8 3240                   CMP/EQ      R4,R2
    000003DA 8B04                   BF          L545
          Test.c   195                    
          Test.c   196                    OpenBTList();
    000003DC BE10                   BSR         _OpenBTList
    000003DE 0009                   NOP
          Test.c   197                    window = 1;
    000003E0 D126                   MOV.L       L640+28,R1 ; _window
    000003E2 E301                   MOV         #1,R3
    000003E4 2132                   MOV.L       R3,@R1
    000003E6              L545:                             
          Test.c   198                }
          Test.c   199            }
          Test.c   200    
          Test.c   201            if(window == 1){
    000003E6 D225                   MOV.L       L640+28,R2 ; _window
    000003E8 6022                   MOV.L       @R2,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003EA 8801                   CMP/EQ      #1,R0
    000003EC 8901                   BT          L641
    000003EE A123                   BRA         L567
    000003F0 0009                   NOP
    000003F2              L641:                             
          Test.c   202                if (key == KEY_CTRL_F2) {
    000003F2 9135                   MOV.W       L640,R1    ; H'753A
    000003F4 63F2                   MOV.L       @R15,R3
    000003F6 3310                   CMP/EQ      R1,R3
    000003F8 8B09                   BF          L568
          Test.c   203                    if(isLowercase == 1){
    000003FA 6082                   MOV.L       @R8,R0
    000003FC 8801                   CMP/EQ      #1,R0
    000003FE 8B01                   BF          L569
          Test.c   204                        isLowercase = 0;
    00000400 A005                   BRA         L568
    00000402 28D2                   MOV.L       R13,@R8
    00000404              L569:                             
          Test.c   205                    }else if(isLowercase == 0){
    00000404 6082                   MOV.L       @R8,R0
    00000406 2008                   TST         R0,R0
    00000408 8B01                   BF          L568
          Test.c   206                        isLowercase = 1;
    0000040A E301                   MOV         #1,R3
    0000040C 2832                   MOV.L       R3,@R8
    0000040E              L568:                             
          Test.c   207                    }
          Test.c   208                }
          Test.c   209                if(((key >= 65 && key <= 90) || (key >= 48 && key <= 57)) && IsTyping == 1){
    0000040E E241                   MOV         #65,R2
    00000410 61F2                   MOV.L       @R15,R1
    00000412 3122                   CMP/HS      R2,R1
    00000414 8B03                   BF          L574
    00000416 E35A                   MOV         #90,R3
    00000418 61F2                   MOV.L       @R15,R1
    0000041A 3136                   CMP/HI      R3,R1
    0000041C 8B07                   BF          L573
    0000041E              L574:                             
    0000041E E230                   MOV         #48,R2
    00000420 63F2                   MOV.L       @R15,R3
    00000422 3322                   CMP/HS      R2,R3
    00000424 8B45                   BF          L572
    00000426 E339                   MOV         #57,R3
    00000428 61F2                   MOV.L       @R15,R1
    0000042A 3136                   CMP/HI      R3,R1
    0000042C 8941                   BT          L572
    0000042E              L573:                             
    0000042E D214                   MOV.L       L640+32,R2 ; _IsTyping
    00000430 6022                   MOV.L       @R2,R0
    00000432 8801                   CMP/EQ      #1,R0
    00000434 8B3D                   BF          L572
          Test.c   210    
          Test.c   211                    
          Test.c   212                    char buffer[12];
          Test.c   213                    locate(MsgLength,4);
    00000436 E504                   MOV         #4,R5
    00000438 4B0B                   JSR         @R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000043A 64E2                   MOV.L       @R14,R4
          Test.c   214                    if(isLowercase == 0){
    0000043C 6282                   MOV.L       @R8,R2
    0000043E 2228                   TST         R2,R2
    00000440 8922                   BT          L505
          Test.c   215                        sprintf(buffer, "%c", key);         //If the input is upper case, get the normal input
          Test.c   216                    }else if(key >= 65 && key <= 90){
    00000442 E341                   MOV         #65,R3
    00000444 62F2                   MOV.L       @R15,R2
    00000446 3232                   CMP/HS      R3,R2
    00000448 8B1E                   BF          L505
    0000044A E25A                   MOV         #90,R2
    0000044C 61F2                   MOV.L       @R15,R1
    0000044E 3126                   CMP/HI      R2,R1
    00000450 891A                   BT          L505
          Test.c   217                        sprintf(buffer, "%c", (key+32));    //if the input is a number and upper case, get the
                         + input + 32 to be in lower case
    00000452 63F2                   MOV.L       @R15,R3
    00000454 D20B                   MOV.L       L640+36,R2 ; L441
    00000456 7320                   ADD         #32,R3
    00000458 2F36                   MOV.L       R3,@-R15
    0000045A 2F26                   MOV.L       R2,@-R15
    0000045C A018                   BRA         L630
    0000045E 0009                   NOP
    00000460              L640:                             
    00000460 753A                   .DATA.W     H'753A
    00000462 7539                   .DATA.W     H'7539
    00000464 03E8                   .DATA.W     H'03E8
    00000466 753C                   .DATA.W     H'753C
    00000468 <00000000>             .DATA.L     L429
    0000046C <00000000>             .DATA.L     _IsSleeping
    00000470 <00000000>             .DATA.L     _Serial_ClearTransmitBuffer
    00000474 <00000000>             .DATA.L     L430
    00000478 <00000000>             .DATA.L     _Serial_WriteBytes
    0000047C <00000000>             .DATA.L     _window
    00000480 <00000000>             .DATA.L     _IsTyping
    00000484 <00000000>             .DATA.L     L441
    00000488              L505:
          Test.c   218                    }else{
          Test.c   219                        sprintf(buffer, "%c", key);
    00000488 63F2                   MOV.L       @R15,R3
    0000048A 2F36                   MOV.L       R3,@-R15
    0000048C D23C                   MOV.L       L642+14,R2 ; L441
    0000048E 2F26                   MOV.L       R2,@-R15
    00000490              L630:                             
    00000490 946F                   MOV.W       L642,R4    ; H'1014
    00000492 D33C                   MOV.L       L642+18,R3 ; _sprintf
    00000494 430B                   JSR         @R3
    00000496 34FC                   ADD         R15,R4
          Test.c   220                    }
          Test.c   221                    Print(buffer);
    00000498 946C                   MOV.W       L642+2,R4  ; H'100C
    0000049A 7F08                   ADD         #8,R15
    0000049C 4A0B                   JSR         @R10
    0000049E 34FC                   ADD         R15,R4
          Test.c   222                    strncat(MsgBuffer, &buffer, 1);
    000004A0 55F4                   MOV.L       @(16,R15),R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004A2 E601                   MOV         #1,R6
    000004A4 D338                   MOV.L       L642+22,R3 ; _strncat
    000004A6 430B                   JSR         @R3
    000004A8 64C3                   MOV         R12,R4
          Test.c   223                    MsgLength++;
    000004AA 62E2                   MOV.L       @R14,R2
    000004AC 7201                   ADD         #1,R2
    000004AE A026                   BRA         L579
    000004B0 2E22                   MOV.L       R2,@R14
    000004B2              L572:                             
          Test.c   224                }
          Test.c   225                else if((key == KEY_CTRL_DEL) && IsTyping == 1){
    000004B2 9160                   MOV.W       L642+4,R1  ; H'7549
    000004B4 63F2                   MOV.L       @R15,R3
    000004B6 3310                   CMP/EQ      R1,R3
    000004B8 8B21                   BF          L579
    000004BA D334                   MOV.L       L642+26,R3 ; _IsTyping
    000004BC 6032                   MOV.L       @R3,R0
    000004BE 8801                   CMP/EQ      #1,R0
    000004C0 8B1D                   BF          L579
          Test.c   226                    if(MsgLength > 3){
    000004C2 E103                   MOV         #3,R1
    000004C4 62E2                   MOV.L       @R14,R2
    000004C6 3217                   CMP/GT      R1,R2
    000004C8 8B19                   BF          L579
          Test.c   227                        MsgLength--;
          Test.c   228                        locate(MsgLength,4);
    000004CA E504                   MOV         #4,R5
    000004CC 60E2                   MOV.L       @R14,R0
    000004CE 70FF                   ADD         #-1,R0
    000004D0 2E02                   MOV.L       R0,@R14
    000004D2 4B0B                   JSR         @R11
    000004D4 6403                   MOV         R0,R4
          Test.c   229                        Print((unsigned char*)" ");
    000004D6 D42E                   MOV.L       L642+30,R4 ; L446
    000004D8 4A0B                   JSR         @R10
    000004DA 0009                   NOP
          Test.c   230                        strcpy(&MsgBuffer[strlen(MsgBuffer)-1], &MsgBuffer[strlen(MsgBuffer)]);
    000004DC D32D                   MOV.L       L642+34,R3 ; _strlen
    000004DE 430B                   JSR         @R3
    000004E0 64C3                   MOV         R12,R4
    000004E2 63C3                   MOV         R12,R3
    000004E4 D22B                   MOV.L       L642+34,R2 ; _strlen
    000004E6 330C                   ADD         R0,R3
    000004E8 2F36                   MOV.L       R3,@-R15
    000004EA 420B                   JSR         @R2
    000004EC 64C3                   MOV         R12,R4
    000004EE 30CC                   ADD         R12,R0
    000004F0 D329                   MOV.L       L642+38,R3 ; __slow_strcpy
    000004F2 70FF                   ADD         #-1,R0
    000004F4 430B                   JSR         @R3
    000004F6 61F6                   MOV.L       @R15+,R1
          Test.c   231                        locate(MsgLength,4);
    000004F8 E504                   MOV         #4,R5
    000004FA 4B0B                   JSR         @R11
    000004FC 64E2                   MOV.L       @R14,R4
    000004FE              L579:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Test.c   232                    }
          Test.c   233                }
          Test.c   234                if((key == KEY_CTRL_EXE) && IsTyping == 1){
    000004FE 923B                   MOV.W       L642+6,R2  ; H'7534
    00000500 63F2                   MOV.L       @R15,R3
    00000502 3320                   CMP/EQ      R2,R3
    00000504 8901                   BT          L643
    00000506 A07F                   BRA         L582
    00000508 0009                   NOP
    0000050A              L643:                             
    0000050A D320                   MOV.L       L642+26,R3 ; _IsTyping
    0000050C 6032                   MOV.L       @R3,R0
    0000050E 8801                   CMP/EQ      #1,R0
    00000510 8B7A                   BF          L582
          Test.c   235                    IsTyping = 0;
    00000512 D21E                   MOV.L       L642+26,R2 ; _IsTyping
          Test.c   236                    if(strlen(MsgBuffer) == 0){
    00000514 D31F                   MOV.L       L642+34,R3 ; _strlen
    00000516 22D2                   MOV.L       R13,@R2
    00000518 430B                   JSR         @R3
    0000051A 64C3                   MOV         R12,R4
    0000051C 2008                   TST         R0,R0
    0000051E 8973                   BT          L582
          Test.c   237                        ;
          Test.c   238                    }else{
          Test.c   239                        
          Test.c   240                        int IsConnected = 0;
          Test.c   241    
          Test.c   242                        char *ReservedBuffer[1024];
          Test.c   243                        short *recSize;
          Test.c   244                        int CountExcess = 0;
          Test.c   245    
          Test.c   246                        char *ReservedBufferBisPointer = &ReservedBufferBis;
          Test.c   247                        short* recSizeBis;
          Test.c   248    
          Test.c   249                        Serial_ClearTransmitBuffer();
    00000520 D31E                   MOV.L       L642+42,R3 ; _Serial_ClearTransmitBuffer
    00000522 430B                   JSR         @R3
    00000524 1FD1                   MOV.L       R13,@(4,R15)
          Test.c   250                        Serial_WriteBytes("&ConnectBT&", 12);    //send signal to the ESP32 to connect
    00000526 D41E                   MOV.L       L642+46,R4 ; L456
    00000528 D21E                   MOV.L       L642+50,R2 ; _Serial_WriteBytes
    0000052A 420B                   JSR         @R2
    0000052C E50C                   MOV         #12,R5
          Test.c   251                        Sleep(10);
          Test.c   252                        while(Serial_ReadBytes(ReservedBuffer, 1024, recSize) == 1){     //waiting for a respo
                         +nse
    0000052E A007                   BRA         L631
    00000530 E40A                   MOV         #10,R4
    00000532              L586:                             
          Test.c   253                            CountExcess++;
          Test.c   254                            if(CountExcess >= 5){                              //TimeOut
    00000532 E305                   MOV         #5,R3
    00000534 52F1                   MOV.L       @(4,R15),R2
    00000536 7201                   ADD         #1,R2
    00000538 3233                   CMP/GE      R3,R2
    0000053A 8D0B                   BT/S        L588




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000053C 1F21                   MOV.L       R2,@(4,R15)
          Test.c   255                                break;
          Test.c   256                            }
          Test.c   257                            Sleep(1000);
    0000053E 941C                   MOV.W       L642+8,R4  ; H'03E8
    00000540              L631:                             
    00000540 490B                   JSR         @R9
    00000542 0009                   NOP
    00000544 951A                   MOV.W       L642+10,R5 ; H'0400
    00000546 64F3                   MOV         R15,R4
    00000548 D317                   MOV.L       L642+54,R3 ; _Serial_ReadBytes
    0000054A 66F3                   MOV         R15,R6
    0000054C 430B                   JSR         @R3
    0000054E 7418                   ADD         #24,R4
    00000550 8801                   CMP/EQ      #1,R0
    00000552 89EE                   BT          L586
    00000554              L588:                             
          Test.c   258                        }
          Test.c   259    
          Test.c   260                        Serial_ClearTransmitBuffer();
    00000554 D311                   MOV.L       L642+42,R3 ; _Serial_ClearTransmitBuffer
    00000556 430B                   JSR         @R3
    00000558 0009                   NOP
          Test.c   261                        Serial_WriteBytes(MsgBuffer, strlen(MsgBuffer)+1);              //send the name of the
                         + device to connect to the ESP32
    0000055A D20E                   MOV.L       L642+34,R2 ; _strlen
    0000055C 420B                   JSR         @R2
    0000055E 64C3                   MOV         R12,R4
    00000560 D310                   MOV.L       L642+50,R3 ; _Serial_WriteBytes
    00000562 6503                   MOV         R0,R5
    00000564 7501                   ADD         #1,R5
    00000566 430B                   JSR         @R3
    00000568 64C3                   MOV         R12,R4
          Test.c   262    
          Test.c   263                        Sleep(10);
    0000056A 490B                   JSR         @R9
    0000056C E40A                   MOV         #10,R4
          Test.c   264                        CountExcess = 0;
          Test.c   265                        while(Serial_ReadBytes(ReservedBufferBisPointer, 1024, recSizeBis) == 1){   //waiting 
                         +for a response
    0000056E A026                   BRA         L589
    00000570 1FD1                   MOV.L       R13,@(4,R15)
    00000572              L642:                             
    00000572 1014                   .DATA.W     H'1014
    00000574 100C                   .DATA.W     H'100C
    00000576 7549                   .DATA.W     H'7549
    00000578 7534                   .DATA.W     H'7534
    0000057A 03E8                   .DATA.W     H'03E8
    0000057C 0400                   .DATA.W     H'0400
    0000057E 0000                   .DATA.W     0
    00000580 <00000000>             .DATA.L     L441
    00000584 <00000000>             .DATA.L     _sprintf
    00000588 <00000000>             .DATA.L     _strncat
    0000058C <00000000>             .DATA.L     _IsTyping
    00000590 <00000000>             .DATA.L     L446
    00000594 <00000000>             .DATA.L     _strlen
    00000598 <00000000>             .DATA.L     __slow_strcpy




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000059C <00000000>             .DATA.L     _Serial_ClearTransmitBuffer
    000005A0 <00000000>             .DATA.L     L456
    000005A4 <00000000>             .DATA.L     _Serial_WriteBytes
    000005A8 <00000000>             .DATA.L     _Serial_ReadBytes
    000005AC              L590:                             
          Test.c   266                            CountExcess++;
    000005AC 52F1                   MOV.L       @(4,R15),R2
          Test.c   267                            if(CountExcess >= 12){                                //TimeOut
    000005AE E40C                   MOV         #12,R4
    000005B0 7201                   ADD         #1,R2
    000005B2 3243                   CMP/GE      R4,R2
    000005B4 8D0A                   BT/S        L592
    000005B6 1F21                   MOV.L       R2,@(4,R15)
          Test.c   268                                break;
          Test.c   269                            }
          Test.c   270                            Sleep(1000);
    000005B8 9464                   MOV.W       L644,R4    ; H'03E8
    000005BA 490B                   JSR         @R9
    000005BC 0009                   NOP
    000005BE              L589:                             
    000005BE 66F3                   MOV         R15,R6
    000005C0 9561                   MOV.W       L644+2,R5  ; H'0400
    000005C2 D333                   MOV.L       L644+12,R3 ; _Serial_ReadBytes
    000005C4 430B                   JSR         @R3
    000005C6 54F3                   MOV.L       @(12,R15),R4
    000005C8 8801                   CMP/EQ      #1,R0
    000005CA 89EF                   BT          L590
    000005CC              L592:                             
          Test.c   271                        }
          Test.c   272    
          Test.c   273                        locate(1,7);
    000005CC E507                   MOV         #7,R5
    000005CE 4B0B                   JSR         @R11
    000005D0 E401                   MOV         #1,R4
          Test.c   274    
          Test.c   275                        if(strcmp(ReservedBufferBis, "&Connect") == 0){            //connected
    000005D2 D530                   MOV.L       L644+16,R5 ; L461
    000005D4 D430                   MOV.L       L644+20,R4 ; _ReservedBufferBis
    000005D6 D331                   MOV.L       L644+24,R3 ; __slow_strcmp1
    000005D8 430B                   JSR         @R3
    000005DA 0009                   NOP
    000005DC 2008                   TST         R0,R0
    000005DE 8B04                   BF          L593
          Test.c   276                            Print((unsigned char*)"Connected !            ");
    000005E0 D42F                   MOV.L       L644+28,R4 ; L463
    000005E2 4A0B                   JSR         @R10
    000005E4 0009                   NOP
    000005E6 A00D                   BRA         L594
    000005E8 0009                   NOP
    000005EA              L593:                             
          Test.c   277                        }else if(strcmp(ReservedBufferBis, "&Fail") == 0){         //TimeOut
    000005EA D52E                   MOV.L       L644+32,R5 ; L464
    000005EC D42A                   MOV.L       L644+20,R4 ; _ReservedBufferBis
    000005EE D22B                   MOV.L       L644+24,R2 ; __slow_strcmp1
    000005F0 420B                   JSR         @R2
    000005F2 0009                   NOP
    000005F4 2008                   TST         R0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005F6 8B02                   BF          L595
          Test.c   278                            Print((unsigned char*)"BT not found           ");
    000005F8 D42B                   MOV.L       L644+36,R4 ; L466
    000005FA A001                   BRA         L632
    000005FC 0009                   NOP
    000005FE              L595:                             
          Test.c   279                        }else{
          Test.c   280                            Print((unsigned char*)"Communication error    ");
    000005FE D42B                   MOV.L       L644+40,R4 ; L468
    00000600              L632:                             
    00000600 4A0B                   JSR         @R10
    00000602 0009                   NOP
    00000604              L594:                             
          Test.c   281                        }
          Test.c   282    
          Test.c   283                        MsgLength = 5;
    00000604 E305                   MOV         #5,R3
    00000606 2E32                   MOV.L       R3,@R14
    00000608              L582:                             
          Test.c   284                    }
          Test.c   285                }
          Test.c   286                if(key == KEY_CTRL_F1){
    00000608 923E                   MOV.W       L644+4,R2  ; H'7539
    0000060A 61F2                   MOV.L       @R15,R1
    0000060C 3120                   CMP/EQ      R2,R1
    0000060E 8B05                   BF          L597
          Test.c   287                    isPressed = 1;
    00000610 E301                   MOV         #1,R3
          Test.c   288                    window = 2;
    00000612 E402                   MOV         #2,R4
    00000614 1F32                   MOV.L       R3,@(8,R15)
    00000616 D326                   MOV.L       L644+44,R3 ; _window
          Test.c   289                    CreateBTMenu();
    00000618 BD1B                   BSR         _CreateBTMenu
    0000061A 2342                   MOV.L       R4,@R3
    0000061C              L597:                             
          Test.c   290                }
          Test.c   291                if(key == KEY_CTRL_F6 || key == KEY_CTRL_EXIT){
    0000061C 9235                   MOV.W       L644+6,R2  ; H'753E
    0000061E 61F2                   MOV.L       @R15,R1
    00000620 3120                   CMP/EQ      R2,R1
    00000622 8903                   BT          L599
    00000624 9332                   MOV.W       L644+8,R3  ; H'7532
    00000626 61F2                   MOV.L       @R15,R1
    00000628 3130                   CMP/EQ      R3,R1
    0000062A 8B05                   BF          L567
    0000062C              L599:                             
          Test.c   292                    Bdisp_AllClr_VRAM();
    0000062C D221                   MOV.L       L644+48,R2 ; _Bdisp_AllClr_VRAM
    0000062E 420B                   JSR         @R2
    00000630 0009                   NOP
          Test.c   293                    window = 0;
    00000632 D31F                   MOV.L       L644+44,R3 ; _window
          Test.c   294    
          Test.c   295                    MainMenu();
    00000634 BD36                   BSR         _MainMenu
    00000636 23D2                   MOV.L       R13,@R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000638              L567:                             
          Test.c   296                }
          Test.c   297    
          Test.c   298            }
          Test.c   299    
          Test.c   300            if(window == 2){
    00000638 D11D                   MOV.L       L644+44,R1 ; _window
    0000063A 6012                   MOV.L       @R1,R0
    0000063C 8802                   CMP/EQ      #2,R0
    0000063E 8901                   BT          L645
    00000640 ADAF                   BRA         L544
    00000642 0009                   NOP
    00000644              L645:                             
          Test.c   301                if(key == KEY_CTRL_F6 || key == KEY_CTRL_EXIT){
    00000644 9221                   MOV.W       L644+6,R2  ; H'753E
    00000646 63F2                   MOV.L       @R15,R3
    00000648 3320                   CMP/EQ      R2,R3
    0000064A 8903                   BT          L602
    0000064C 931E                   MOV.W       L644+8,R3  ; H'7532
    0000064E 60F2                   MOV.L       @R15,R0
    00000650 3030                   CMP/EQ      R3,R0
    00000652 8B06                   BF          L601
    00000654              L602:                             
          Test.c   302                    Bdisp_AllClr_VRAM();
    00000654 D217                   MOV.L       L644+48,R2 ; _Bdisp_AllClr_VRAM
    00000656 420B                   JSR         @R2
    00000658 0009                   NOP
          Test.c   303                    window = 1;
    0000065A E101                   MOV         #1,R1
    0000065C D214                   MOV.L       L644+44,R2 ; _window
          Test.c   304                    OpenBTList();
    0000065E BCCF                   BSR         _OpenBTList
    00000660 2212                   MOV.L       R1,@R2
    00000662              L601:                             
          Test.c   305                } 
          Test.c   306    
          Test.c   307                if (key == KEY_CTRL_F2) {
    00000662 9014                   MOV.W       L644+10,R0 ; H'753A
    00000664 63F2                   MOV.L       @R15,R3
    00000666 3300                   CMP/EQ      R0,R3
    00000668 8B26                   BF          L603
          Test.c   308    
          Test.c   309                    int iresult3;
          Test.c   310                    if(isLowercase == 1){
    0000066A 6082                   MOV.L       @R8,R0
    0000066C 8801                   CMP/EQ      #1,R0
    0000066E 8B01                   BF          L604
          Test.c   311                        isLowercase = 0;
    00000670 A090                   BRA         L607
    00000672 28D2                   MOV.L       R13,@R8
    00000674              L604:                             
          Test.c   312                    }else if(isLowercase == 0){
    00000674 6382                   MOV.L       @R8,R3
    00000676 2338                   TST         R3,R3
    00000678 8901                   BT          L646
    0000067A A08B                   BRA         L607
    0000067C 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000067E              L646:                             
          Test.c   313                        isLowercase = 1;
    0000067E E301                   MOV         #1,R3
    00000680 A088                   BRA         L607
    00000682 2832                   MOV.L       R3,@R8
    00000684              L644:                             
    00000684 03E8                   .DATA.W     H'03E8
    00000686 0400                   .DATA.W     H'0400
    00000688 7539                   .DATA.W     H'7539
    0000068A 753E                   .DATA.W     H'753E
    0000068C 7532                   .DATA.W     H'7532
    0000068E 753A                   .DATA.W     H'753A
    00000690 <00000000>             .DATA.L     _Serial_ReadBytes
    00000694 <00000000>             .DATA.L     L461
    00000698 <00000000>             .DATA.L     _ReservedBufferBis
    0000069C <00000000>             .DATA.L     __slow_strcmp1
    000006A0 <00000000>             .DATA.L     L463
    000006A4 <00000000>             .DATA.L     L464
    000006A8 <00000000>             .DATA.L     L466
    000006AC <00000000>             .DATA.L     L468
    000006B0 <00000000>             .DATA.L     _window
    000006B4 <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    000006B8              L603:                             
          Test.c   314                    }
          Test.c   315                }
          Test.c   316                
          Test.c   317                else if(((key >= 65 && key <= 90) || (key >= 48 && key <= 57)) && IsTyping == 1){
    000006B8 62F2                   MOV.L       @R15,R2
    000006BA E141                   MOV         #65,R1
    000006BC 3212                   CMP/HS      R1,R2
    000006BE 8B03                   BF          L610
    000006C0 62F2                   MOV.L       @R15,R2
    000006C2 E35A                   MOV         #90,R3
    000006C4 3236                   CMP/HI      R3,R2
    000006C6 8B07                   BF          L609
    000006C8              L610:                             
    000006C8 63F2                   MOV.L       @R15,R3
    000006CA E130                   MOV         #48,R1
    000006CC 3312                   CMP/HS      R1,R3
    000006CE 8B3B                   BF          L608
    000006D0 62F2                   MOV.L       @R15,R2
    000006D2 E339                   MOV         #57,R3
    000006D4 3236                   CMP/HI      R3,R2
    000006D6 8937                   BT          L608
    000006D8              L609:                             
    000006D8 D117                   MOV.L       L647+4,R1  ; _IsTyping
    000006DA 6012                   MOV.L       @R1,R0
    000006DC 8801                   CMP/EQ      #1,R0
    000006DE 8B33                   BF          L608
          Test.c   318    
          Test.c   319                    
          Test.c   320                    unsigned char buffer[12];
          Test.c   321                    locate(MsgLength,4);
    000006E0 E504                   MOV         #4,R5
    000006E2 4B0B                   JSR         @R11
    000006E4 64E2                   MOV.L       @R14,R4
          Test.c   322                    if(isLowercase == 0){




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006E6 6282                   MOV.L       @R8,R2
    000006E8 2228                   TST         R2,R2
    000006EA 890E                   BT          L504
          Test.c   323                        sprintf(buffer, "%c", key);         //If the input is upper case, get the normal input
          Test.c   324                    }else if(key >= 65 && key <= 90){
    000006EC 62F2                   MOV.L       @R15,R2
    000006EE E341                   MOV         #65,R3
    000006F0 3232                   CMP/HS      R3,R2
    000006F2 8B0A                   BF          L504
    000006F4 61F2                   MOV.L       @R15,R1
    000006F6 E25A                   MOV         #90,R2
    000006F8 3126                   CMP/HI      R2,R1
    000006FA 8906                   BT          L504
          Test.c   325                        sprintf(buffer, "%c", (key+32));    //if the input is a number and upper case, get the
                         + input + 32 to be in lower case
    000006FC 63F2                   MOV.L       @R15,R3
    000006FE 7320                   ADD         #32,R3
    00000700 2F36                   MOV.L       R3,@-R15
    00000702 D20E                   MOV.L       L647+8,R2  ; L441
    00000704 2F26                   MOV.L       R2,@-R15
    00000706 A004                   BRA         L633
    00000708 0009                   NOP
    0000070A              L504:
          Test.c   326                    }else{
          Test.c   327                        sprintf(buffer, "%c", key);
    0000070A 63F2                   MOV.L       @R15,R3
    0000070C D20B                   MOV.L       L647+8,R2  ; L441
    0000070E 2F36                   MOV.L       R3,@-R15
    00000710 2F26                   MOV.L       R2,@-R15
    00000712              L633:                             
    00000712 940F                   MOV.W       L647,R4    ; H'1014
    00000714 D30A                   MOV.L       L647+12,R3 ; _sprintf
    00000716 430B                   JSR         @R3
    00000718 34FC                   ADD         R15,R4
    0000071A 7F08                   ADD         #8,R15
          Test.c   328                    }
          Test.c   329                    Print(buffer);
    0000071C 940B                   MOV.W       L647+2,R4  ; H'100C
    0000071E 4A0B                   JSR         @R10
    00000720 34FC                   ADD         R15,R4
          Test.c   330                    strncat(MsgBuffer, &buffer, 1);
    00000722 E601                   MOV         #1,R6
    00000724 55F5                   MOV.L       @(20,R15),R5
    00000726 D307                   MOV.L       L647+16,R3 ; _strncat
    00000728 430B                   JSR         @R3
    0000072A 64C3                   MOV         R12,R4
          Test.c   331                    MsgLength++;
    0000072C 62E2                   MOV.L       @R14,R2
    0000072E 7201                   ADD         #1,R2
    00000730 A030                   BRA         L607
    00000732 2E22                   MOV.L       R2,@R14
    00000734              L647:                             
    00000734 1014                   .DATA.W     H'1014
    00000736 100C                   .DATA.W     H'100C
    00000738 <00000000>             .DATA.L     _IsTyping
    0000073C <00000000>             .DATA.L     L441
    00000740 <00000000>             .DATA.L     _sprintf




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000744 <00000000>             .DATA.L     _strncat
    00000748              L608:                             
          Test.c   332                }
          Test.c   333                else if((key == KEY_CTRL_DEL) && IsTyping == 1){
    00000748 918A                   MOV.W       L648,R1    ; H'7549
    0000074A 63F2                   MOV.L       @R15,R3
    0000074C 3310                   CMP/EQ      R1,R3
    0000074E 8B21                   BF          L607
    00000750 D346                   MOV.L       L648+12,R3 ; _IsTyping
    00000752 6032                   MOV.L       @R3,R0
    00000754 8801                   CMP/EQ      #1,R0
    00000756 8B1D                   BF          L607
          Test.c   334    
          Test.c   335                    if(MsgLength > 3){
    00000758 62E2                   MOV.L       @R14,R2
    0000075A E103                   MOV         #3,R1
    0000075C 3217                   CMP/GT      R1,R2
    0000075E 8B19                   BF          L607
          Test.c   336                        MsgLength--;
    00000760 60E2                   MOV.L       @R14,R0
          Test.c   337                        locate(MsgLength,4);
    00000762 E504                   MOV         #4,R5
    00000764 70FF                   ADD         #-1,R0
    00000766 2E02                   MOV.L       R0,@R14
    00000768 4B0B                   JSR         @R11
    0000076A 6403                   MOV         R0,R4
          Test.c   338                        Print((unsigned char*)" ");
    0000076C D440                   MOV.L       L648+16,R4 ; L446
    0000076E 4A0B                   JSR         @R10
    00000770 0009                   NOP
          Test.c   339                        strcpy(&MsgBuffer[strlen(MsgBuffer)-1], &MsgBuffer[strlen(MsgBuffer)]);
    00000772 D340                   MOV.L       L648+20,R3 ; _strlen
    00000774 430B                   JSR         @R3
    00000776 64C3                   MOV         R12,R4
    00000778 D23E                   MOV.L       L648+20,R2 ; _strlen
    0000077A 63C3                   MOV         R12,R3
    0000077C 330C                   ADD         R0,R3
    0000077E 2F36                   MOV.L       R3,@-R15
    00000780 420B                   JSR         @R2
    00000782 64C3                   MOV         R12,R4
    00000784 D33C                   MOV.L       L648+24,R3 ; __slow_strcpy
    00000786 30CC                   ADD         R12,R0
    00000788 70FF                   ADD         #-1,R0
    0000078A 430B                   JSR         @R3
    0000078C 61F6                   MOV.L       @R15+,R1
          Test.c   340                        locate(MsgLength,4);
    0000078E E504                   MOV         #4,R5
    00000790 4B0B                   JSR         @R11
    00000792 64E2                   MOV.L       @R14,R4
    00000794              L607:                             
          Test.c   341                    }
          Test.c   342                }
          Test.c   343                if(((key == KEY_CTRL_EXE) || (isPressed*-1+1) * (key == KEY_CTRL_F1)) && IsTyping == 1){
    00000794 9265                   MOV.W       L648+2,R2  ; H'7534
    00000796 63F2                   MOV.L       @R15,R3
    00000798 3320                   CMP/EQ      R2,R3
    0000079A 890C                   BT          L619




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000079C 53F2                   MOV.L       @(8,R15),R3
    0000079E E101                   MOV         #1,R1
    000007A0 9060                   MOV.W       L648+4,R0  ; H'7539
    000007A2 3138                   SUB         R3,R1
    000007A4 62F2                   MOV.L       @R15,R2
    000007A6 3200                   CMP/EQ      R0,R2
    000007A8 0029                   MOVT        R0
    000007AA 0107                   MUL.L       R0,R1
    000007AC 011A                   STS         MACL,R1
    000007AE 2118                   TST         R1,R1
    000007B0 8B01                   BF          L649
    000007B2 ACF6                   BRA         L544
    000007B4 0009                   NOP
    000007B6              L649:                             
    000007B6              L619:                             
    000007B6 D32D                   MOV.L       L648+12,R3 ; _IsTyping
    000007B8 6032                   MOV.L       @R3,R0
    000007BA 8801                   CMP/EQ      #1,R0
    000007BC 8901                   BT          L650
    000007BE ACF0                   BRA         L544
    000007C0 0009                   NOP
    000007C2              L650:                             
          Test.c   344    
          Test.c   345                    IsTyping = 0;
    000007C2 D12A                   MOV.L       L648+12,R1 ; _IsTyping
          Test.c   346                    if(strlen(MsgBuffer) == 0){
    000007C4 D32B                   MOV.L       L648+20,R3 ; _strlen
    000007C6 21D2                   MOV.L       R13,@R1
    000007C8 430B                   JSR         @R3
    000007CA 64C3                   MOV         R12,R4
    000007CC 2008                   TST         R0,R0
    000007CE 8B01                   BF          L651
    000007D0 ACE7                   BRA         L544
    000007D2 0009                   NOP
    000007D4              L651:                             
          Test.c   347                        //AUX_DisplayErrorMessage(20);
          Test.c   348                        ;
          Test.c   349                    }else if(strlen(MsgBuffer) > 25){
    000007D4 D227                   MOV.L       L648+20,R2 ; _strlen
    000007D6 420B                   JSR         @R2
    000007D8 64C3                   MOV         R12,R4
    000007DA E319                   MOV         #25,R3
    000007DC 3036                   CMP/HI      R3,R0
    000007DE 8B01                   BF          L652
    000007E0 ACDF                   BRA         L544
    000007E2 0009                   NOP
    000007E4              L652:                             
          Test.c   350                        //AUX_DisplayErrorMessage(16);
          Test.c   351                        ;
          Test.c   352                    }else{
          Test.c   353                        //Cursor_SetFlashOff();
          Test.c   354    
          Test.c   355                        unsigned char *ReservedBuffer;
          Test.c   356                        short *recSize;
          Test.c   357                        int CountExcess = 0;
          Test.c   358    
          Test.c   359                        Serial_ClearTransmitBuffer();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007E4 D225                   MOV.L       L648+28,R2 ; _Serial_ClearTransmitBuffer
    000007E6 420B                   JSR         @R2
    000007E8 1FD2                   MOV.L       R13,@(8,R15)
          Test.c   360                        Serial_WriteBytes((unsigned char*)"&NewBT&", 8);     //send signal to the ESP32 to cre
                         +ate BT AP
    000007EA D425                   MOV.L       L648+32,R4 ; L491
    000007EC D325                   MOV.L       L648+36,R3 ; _Serial_WriteBytes
    000007EE 430B                   JSR         @R3
    000007F0 E508                   MOV         #8,R5
          Test.c   361                        Sleep(10);
          Test.c   362                        while(Serial_ReadBytes(ReservedBuffer, 1024, recSize) == 1){     //waiting for a respo
                         +nse
    000007F2 A007                   BRA         L634
    000007F4 E40A                   MOV         #10,R4
    000007F6              L625:                             
          Test.c   363                            CountExcess++;
          Test.c   364                            if(CountExcess >= 5){                               //TimeOut
    000007F6 E205                   MOV         #5,R2
    000007F8 53F2                   MOV.L       @(8,R15),R3
    000007FA 7301                   ADD         #1,R3
    000007FC 3323                   CMP/GE      R2,R3
    000007FE 8D0A                   BT/S        L627
    00000800 1F32                   MOV.L       R3,@(8,R15)
          Test.c   365                                break;
          Test.c   366                            }
          Test.c   367                            Sleep(1000);
    00000802 9430                   MOV.W       L648+6,R4  ; H'03E8
    00000804              L634:                             
    00000804 490B                   JSR         @R9
    00000806 0009                   NOP
    00000808 952E                   MOV.W       L648+8,R5  ; H'0400
    0000080A 66F3                   MOV         R15,R6
    0000080C D31E                   MOV.L       L648+40,R3 ; _Serial_ReadBytes
    0000080E 430B                   JSR         @R3
    00000810 64F3                   MOV         R15,R4
    00000812 8801                   CMP/EQ      #1,R0
    00000814 89EF                   BT          L625
    00000816              L627:                             
          Test.c   368                        }
          Test.c   369                        Sleep(10);
    00000816 490B                   JSR         @R9
    00000818 E40A                   MOV         #10,R4
          Test.c   370                        Serial_ClearTransmitBuffer();
    0000081A D318                   MOV.L       L648+28,R3 ; _Serial_ClearTransmitBuffer
    0000081C 430B                   JSR         @R3
    0000081E 0009                   NOP
          Test.c   371                        Serial_WriteBytes(MsgBuffer, strlen(MsgBuffer));         //Send the name of BT AP to t
                         +he ESP32
    00000820 D214                   MOV.L       L648+20,R2 ; _strlen
    00000822 420B                   JSR         @R2
    00000824 64C3                   MOV         R12,R4
    00000826 6503                   MOV         R0,R5
    00000828 D316                   MOV.L       L648+36,R3 ; _Serial_WriteBytes
    0000082A 430B                   JSR         @R3
    0000082C 64C3                   MOV         R12,R4
          Test.c   372                        Sleep(10);
    0000082E 490B                   JSR         @R9




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000830 E40A                   MOV         #10,R4
          Test.c   373    
          Test.c   374                        locate(1,7);
    00000832 E507                   MOV         #7,R5
    00000834 4B0B                   JSR         @R11
    00000836 E401                   MOV         #1,R4
          Test.c   375                        Print((unsigned char*)"Created !            ");
    00000838 D414                   MOV.L       L648+44,R4 ; L494
    0000083A 4A0B                   JSR         @R10
    0000083C 0009                   NOP
          Test.c   376                        MsgLength = 3;
    0000083E E203                   MOV         #3,R2
    00000840 ACAF                   BRA         L544
    00000842 2E22                   MOV.L       R2,@R14
    00000844              L547:                             
          Test.c   377                    }
          Test.c   378                }
          Test.c   379            }
          Test.c   380        }
          Test.c   381    
          Test.c   382    }
    00000844 9111                   MOV.W       L648+10,R1 ; H'1018
    00000846 3F1C                   ADD         R1,R15
    00000848 4F16                   LDS.L       @R15+,MACL
    0000084A 4F26                   LDS.L       @R15+,PR
    0000084C 68F6                   MOV.L       @R15+,R8
    0000084E 69F6                   MOV.L       @R15+,R9
    00000850 6AF6                   MOV.L       @R15+,R10
    00000852 6BF6                   MOV.L       @R15+,R11
    00000854 6CF6                   MOV.L       @R15+,R12
    00000856 6DF6                   MOV.L       @R15+,R13
    00000858 000B                   RTS
    0000085A 6EF6                   MOV.L       @R15+,R14
          Test.c   383    int AddIn_main(int isAppli, unsigned short OptionNum)
    0000085C              _AddIn_main:                     ; function: AddIn_main
                                                           ; frame size=0
          Test.c   384    {
          Test.c   385        main();
    0000085C AC86                   BRA         _main
    0000085E 0009                   NOP
    00000860              L648:                             
    00000860 7549                   .DATA.W     H'7549
    00000862 7534                   .DATA.W     H'7534
    00000864 7539                   .DATA.W     H'7539
    00000866 03E8                   .DATA.W     H'03E8
    00000868 0400                   .DATA.W     H'0400
    0000086A 1018                   .DATA.W     H'1018
    0000086C <00000000>             .DATA.L     _IsTyping
    00000870 <00000000>             .DATA.L     L446
    00000874 <00000000>             .DATA.L     _strlen
    00000878 <00000000>             .DATA.L     __slow_strcpy
    0000087C <00000000>             .DATA.L     _Serial_ClearTransmitBuffer
    00000880 <00000000>             .DATA.L     L491
    00000884 <00000000>             .DATA.L     _Serial_WriteBytes
    00000888 <00000000>             .DATA.L     _Serial_ReadBytes
    0000088C <00000000>             .DATA.L     L494
          Test.c   386        




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Test.c   387    }
          Test.c   388    
          Test.c   389    //****************************************************************************
          Test.c   390    //**************                                              ****************
          Test.c   391    //**************                 Notice!                      ****************
          Test.c   392    //**************                                              ****************
          Test.c   393    //**************  Please do not change the following source.  ****************
          Test.c   394    //**************                                              ****************
          Test.c   395    //****************************************************************************
          Test.c   396    
          Test.c   397    
          Test.c   398    #pragma section _BR_Size
          Test.c   399    unsigned long BR_Size;
          Test.c   400    #pragma section
          Test.c   401    
          Test.c   402    
          Test.c   403    #pragma section _TOP
          Test.c   404    
          Test.c   405    //****************************************************************************
          Test.c   406    //  InitializeSystem
          Test.c   407    //
          Test.c   408    //  param   :   isAppli   : 1 = Application / 0 = eActivity
          Test.c   409    //              OptionNum : Option Number (only eActivity)
          Test.c   410    //
          Test.c   411    //  retval  :   1 = No error / 0 = Error
          Test.c   412    //
          Test.c   413    //****************************************************************************
          Test.c   414    int InitializeSystem(int isAppli, unsigned short OptionNum)
P_T 00000000              _InitializeSystem:               ; function: InitializeSystem
                                                           ; frame size=0
          Test.c   415    {
          Test.c   416        return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
    00000000 D301                   MOV.L       L653+2,R3  ; _INIT_ADDIN_APPLICATION
    00000002 432B                   JMP         @R3
    00000004 0009                   NOP
    00000006              L653:                             
    00000006 0000                   .DATA.W     0
    00000008 <00000000>             .DATA.L     _INIT_ADDIN_APPLICATION
          Test.c   417    }
          Test.c   418    
          Test.c   419    #pragma section
D   00000000              _window:                         ; static: window
    00000000 00000000               .DATA.L     H'00000000
    00000004              _IsExam:                         ; static: IsExam
    00000004 00000000               .DATA.L     H'00000000
    00000008              _i:                              ; static: i
    00000008 00000000               .DATA.L     H'00000000
    0000000C              _IsTyping:                       ; static: IsTyping
    0000000C 00000000               .DATA.L     H'00000000
    00000010              _IsSleeping:                     ; static: IsSleeping
    00000010 00000000               .DATA.L     H'00000000
    00000014              _MsgLength:                      ; static: MsgLength
    00000014 00000006               .DATA.L     H'00000006
    00000018              _isLowercase:                    ; static: isLowercase
    00000018 00000000               .DATA.L     H'00000000
C   00000000              L383:
    00000000 46313A6372             .SDATA      "F1:create BT"




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             6561746520   
             4254         
    0000000C 00                     .DATA.B     H'00
    0000000D 00000001               .RES.B      1
    0000000E 00000002               .RES.W      1
    00000010              L384:
    00000010 4E616D6520             .SDATA      "Name of the BT device"
             6F66207468   
             6520425420   
             6465766963   
             65           
    00000025 00                     .DATA.B     H'00
    00000026 00000002               .RES.W      1
    00000028              L385:
    00000028 2D3E                   .SDATA      "->"
    0000002A 00                     .DATA.B     H'00
    0000002B 00000001               .RES.B      1
    0000002C              L388:
    0000002C 4372656174             .SDATA      "Create new BT"
             65206E6577   
             204254       
    00000039 00                     .DATA.B     H'00
    0000003A 00000002               .RES.W      1
    0000003C              L389:
    0000003C 4E616D6520             .SDATA      "Name :"
             3A           
    00000042 00                     .DATA.B     H'00
    00000043 00000001               .RES.B      1
    00000044              L392:
    00000044 46313A6F70             .SDATA      "F1:open serial ESP32"
             656E207365   
             7269616C20   
             4553503332   
    00000058 00                     .DATA.B     H'00
    00000059 00000001               .RES.B      1
    0000005A 00000002               .RES.W      1
    0000005C              L393:
    0000005C 46323A6578             .SDATA      "F2:exam mode"
             616D206D6F   
             6465         
    00000068 00                     .DATA.B     H'00
    00000069 00000001               .RES.B      1
    0000006A 00000002               .RES.W      1
    0000006C              L394:
    0000006C 46333A706F             .SDATA      "F3:power off ESP32"
             776572206F   
             6666204553   
             503332       
    0000007E 00                     .DATA.B     H'00
    0000007F 00000001               .RES.B      1
    00000080              L395:
    00000080 46343A436F             .SDATA      "F4:Connect BT"
             6E6E656374   
             204254       
    0000008D 00                     .DATA.B     H'00
    0000008E 00000002               .RES.W      1
    00000090              L396:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000090 46353A5265             .SDATA      "F5:Restart ESP32"
             7374617274   
             2045535033   
             32           
    000000A0 00                     .DATA.B     H'00
    000000A1 00000001               .RES.B      1
    000000A2 00000002               .RES.W      1
    000000A4              L397:
    000000A4 4553503332             .SDATA      "ESP32 disconnected"
             2064697363   
             6F6E6E6563   
             746564       
    000000B6 00                     .DATA.B     H'00
    000000B7 00000001               .RES.B      1
    000000B8              L398:
    000000B8 4578616D20             .SDATA      "Exam mode off    "
             6D6F646520   
             6F66662020   
             2020         
    000000C9 00                     .DATA.B     H'00
    000000CA              L409:
    000000CA 0005000000             .DATA.B     H'00,H'05,H'00,H'00,H'00,H'00
             00           
    000000D0              L412:
    000000D0 2652737426             .SDATA      "&Rst&"
    000000D5 00                     .DATA.B     H'00
    000000D6 00000002               .RES.W      1
    000000D8              L415:
    000000D8 4553503332             .SDATA      "ESP32 connected    "
             20636F6E6E   
             6563746564   
             20202020     
    000000EB 00                     .DATA.B     H'00
    000000EC              L420:
    000000EC 2645786D4F             .SDATA      "&ExmOn&"
             6E26         
    000000F3 00                     .DATA.B     H'00
    000000F4              L421:
    000000F4 4578616D20             .SDATA      "Exam mode on     "
             6D6F646520   
             6F6E202020   
             2020         
    00000105 00                     .DATA.B     H'00
    00000106 00000002               .RES.W      1
    00000108              L423:
    00000108 2645786D4F             .SDATA      "&ExmOff&"
             666626       
    00000110 00                     .DATA.B     H'00
    00000111 00000001               .RES.B      1
    00000112 00000002               .RES.W      1
    00000114              L426:
    00000114 46333A706F             .SDATA      "F3:power on ESP32  "
             776572206F   
             6E20455350   
             33322020     
    00000127 00                     .DATA.B     H'00
    00000128              L427:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000128 26536C6565             .SDATA      "&Sleep&"
             7026         
    0000012F 00                     .DATA.B     H'00
    00000130              L429:
    00000130 46333A706F             .SDATA      "F3:power off ESP32  "
             776572206F   
             6666204553   
             5033322020   
    00000144 00                     .DATA.B     H'00
    00000145 00000001               .RES.B      1
    00000146 00000002               .RES.W      1
    00000148              L430:
    00000148 26536C6565             .SDATA      "&SleepEXIT&"
             7045584954   
             26           
    00000153 00                     .DATA.B     H'00
    00000154              L441:
    00000154 2563                   .SDATA      "%c"
    00000156 00                     .DATA.B     H'00
    00000157 00000001               .RES.B      1
    00000158              L446:
    00000158 20                     .SDATA      " "
    00000159 00                     .DATA.B     H'00
    0000015A 00000002               .RES.W      1
    0000015C              L456:
    0000015C 26436F6E6E             .SDATA      "&ConnectBT&"
             6563744254   
             26           
    00000167 00                     .DATA.B     H'00
    00000168              L461:
    00000168 26436F6E6E             .SDATA      "&Connect"
             656374       
    00000170 00                     .DATA.B     H'00
    00000171 00000001               .RES.B      1
    00000172 00000002               .RES.W      1
    00000174              L463:
    00000174 436F6E6E65             .SDATA      "Connected !            "
             6374656420   
             2120202020   
             2020202020   
             202020       
    0000018B 00                     .DATA.B     H'00
    0000018C              L464:
    0000018C 264661696C             .SDATA      "&Fail"
    00000191 00                     .DATA.B     H'00
    00000192 00000002               .RES.W      1
    00000194              L466:
    00000194 4254206E6F             .SDATA      "BT not found           "
             7420666F75   
             6E64202020   
             2020202020   
             202020       
    000001AB 00                     .DATA.B     H'00
    000001AC              L468:
    000001AC 436F6D6D75             .SDATA      "Communication error    "
             6E69636174   
             696F6E2065   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             72726F7220   
             202020       
    000001C3 00                     .DATA.B     H'00
    000001C4              L491:
    000001C4 264E657742             .SDATA      "&NewBT&"
             5426         
    000001CB 00                     .DATA.B     H'00
    000001CC              L494:
    000001CC 4372656174             .SDATA      "Created !            "
             6564202120   
             2020202020   
             2020202020   
             20           
    000001E1 00                     .DATA.B     H'00
B   00000000              _n:                              ; static: n
    00000000 00000004               .RES.L      1
    00000004              _MsgBuffer:                      ; static: MsgBuffer
    00000004 00000400               .RES.B      1024
    00000404              _ReservedBufferBis:              ; static: ReservedBufferBis
    00000404 00000400               .RES.B      1024
B_B 00000000              _BR_Size:                        ; static: BR_Size
    00000000 00000004               .RES.L      1







































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Jan-2023 23:58:49  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        18




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      419



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000890 Byte(s)
PROGRAM  SECTION (P_BR_Size):                       00000000 Byte(s)
PROGRAM  SECTION (P_TOP):                           0000000C Byte(s)
CONSTANT SECTION (C):                               000001E2 Byte(s)
CONSTANT SECTION (C_BR_Size):                       00000000 Byte(s)
CONSTANT SECTION (C_TOP):                           00000000 Byte(s)
DATA     SECTION (D):                               0000001C Byte(s)
DATA     SECTION (D_BR_Size):                       00000000 Byte(s)
DATA     SECTION (D_TOP):                           00000000 Byte(s)
BSS      SECTION (B):                               00000804 Byte(s)
BSS      SECTION (B_BR_Size):                       00000004 Byte(s)
BSS      SECTION (B_TOP):                           00000000 Byte(s)

 TOTAL PROGRAM SIZE: 000012A2 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           20
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          17
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           139






















*** COMMAND PARAMETER ***


  -subcommand=C:\Users\rapha\AppData\Local\Temp\hmkEA69.tmp 

